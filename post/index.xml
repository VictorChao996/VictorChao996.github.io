<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 趙冠霖|ZHAO,GUAN-LIN</title>
        <link>https://victorchao996.github.io/post/</link>
        <description>Recent content in Posts on 趙冠霖|ZHAO,GUAN-LIN</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 27 Nov 2022 18:36:00 +0800</lastBuildDate><atom:link href="https://victorchao996.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>前端學習之路-旅程開始</title>
        <link>https://victorchao996.github.io/p/frontend_learning-journey-begin/</link>
        <pubDate>Sun, 27 Nov 2022 18:36:00 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/frontend_learning-journey-begin/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/frontend_learning-journey-begin/path.jpg" alt="Featured image of post 前端學習之路-旅程開始" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;這一篇文是前端學習之路的開篇，最近這段時間被升學的事情搞得焦頭爛額，目前算是告一段落。面對比以往都還要嚴重的低潮期，希望自己可以找一點事情做並且順便轉移自己的注意力。&lt;/p&gt;
&lt;h2 id=&#34;自學回顧&#34;&gt;自學回顧&lt;/h2&gt;
&lt;p&gt;回顧大學前三年課外自學的技術，無論是製作遊戲用的Unity，Android 平台app開發，甚至是跨平台框架flutter都有畫面製作的部分。我發現自己投入最多時間的項目都是介面開發，&lt;strong&gt;比起程式邏輯、數據儲存、資料庫操作，我更喜歡畫面的呈現&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在製作遊戲時我花了不少時間在UI介面的擺放、虛擬鏡頭的移動、動畫上，而在app開發上介面也是我花最多時間琢磨的。從Unity的UI系統中我學到不少觀念，如:&lt;strong&gt;Anchor、縮放、不同resolution&lt;/strong&gt;等；而在app開發上則是學到: &lt;strong&gt;設定基準的位置(start, end, top, bottom)、Margin&amp;amp;Padding、Material Design&lt;/strong&gt;等觀念。&lt;/p&gt;
&lt;p&gt;先前對於前端有著不少的誤解，再加上各種巧合(諸如系上沒有相關課程)，所以沒有實際探索過前端工程這方面的知識。但在經過這兩三周的學習後我才發現，在UI介面開發上的設定都有著異曲同工之妙，或者反過來說，這些UI設計的邏輯設定多少都有受到網頁設計上style 設定的影響。在學習CSS的過程也有種倒吃甘蔗的感覺，見過不同的使用情況對於理解CSS的各項prperty有顯著的幫助。&lt;/p&gt;
&lt;p&gt;舉例來說: CSS flexbox 中的 justify-content 或 align-items 設定就會讓我想到 flutter 框架中 widget 中的命名參數MainAxisAlignment 或 CrossAxisAlignment。而 flutter 的命名&amp;amp;設定相對來說較為直觀，因為可以立即看出設定的是主軸(main axis)還是切軸(cross axis)。&lt;/p&gt;
&lt;h2 id=&#34;新的學習之路&#34;&gt;新的學習之路&lt;/h2&gt;
&lt;p&gt;為了鞭策自己可以學好前端的相關的技術，我給自己的目標是&lt;strong&gt;每周至少發布一篇學習的總結文&lt;/strong&gt;。內容不限技術、經驗談、或實作開發紀錄。希望能在記錄之餘，還可以檢驗自己是否真的有學到新的知識，避免陷入有在持續成長的謊言中。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;這學期修的課程比較少，期許自己不要把時間浪費在一些不會讓自己增長的娛樂上，所以給自己設下這樣的挑戰，就把這挑戰當作是一個比較輕鬆的鐵人賽吧，&lt;strong&gt;目標是30周，連續不間斷的產出前端相關的文章&lt;/strong&gt;。希望三十周後會我會替自己設下的挑戰而感到高興，加油 !&lt;/p&gt;
</description>
        </item>
        <item>
        <title>從Deadlock(死結)的觀點來分析黃色網狀線的作用</title>
        <link>https://victorchao996.github.io/p/test/</link>
        <pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/p/test/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/test/%E9%BB%83%E8%89%B2%E7%B6%B2%E7%8B%80%E7%B7%9A.jpg" alt="Featured image of post 從Deadlock(死結)的觀點來分析黃色網狀線的作用" /&gt;&lt;h2 id=&#34;黃色網狀腺&#34;&gt;黃色網狀腺?&lt;/h2&gt;
&lt;p&gt;你是否有想過路口為什麼需要黃色網狀線? 也許你的直覺是清空路口，避免讓轉彎的車輛阻礙直行車通行，進而造成路口堵塞。那為什麼在路口設置黃色網狀線就可以有效的避免道路堵塞呢? 讓筆者從&lt;strong&gt;作業系統(operation system)學科&lt;/strong&gt;中的觀念來解釋。&lt;/p&gt;
&lt;h2 id=&#34;deadlock-問題&#34;&gt;Deadlock 問題&lt;/h2&gt;
&lt;p&gt;資訊領域學生在學習作業系統(operating system)的過程中會了解到電腦系統通常&lt;strong&gt;只有有限數量的資源&lt;/strong&gt;，這些資源包括CPU 週期、memory 空間、I/O裝置等。
對於數量較多的處理程序(processes)(要執行的程式)需要遵循以下三種順序來使用各種資源，而這三種動作分別是: &lt;strong&gt;申請(request)、使用(use)、釋放(release)。&lt;/strong&gt;
給大家給舉個例子，若一個process在執行的過程中需要使用到印表機，此時&amp;quot;印表機&amp;quot;這個&lt;strong&gt;資源&lt;/strong&gt;被process給佔用，同一時間其他Process無法使用印表機，不然印表機的輸出結果會錯亂。
而探討process與process間執行這三項動作時造成&lt;strong&gt;資源等待&amp;amp;無法有效利用&lt;/strong&gt;的問題就叫做&lt;strong&gt;Deadlock(死結)問題&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;造成deadlock的四個必要條件&#34;&gt;造成Deadlock的四個必要條件&lt;/h2&gt;
&lt;p&gt;在教科書上有提到Deadlock的產生需要同時具備四個條件: &lt;strong&gt;互斥(mutual Exclusion)、持有並等待(Hold &amp;amp; Wait)、非搶斷(No preemption)、循環等待(Circular Wait)&lt;/strong&gt;，以下分別是其簡短的介紹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥(Mutual Exclusion)&lt;/strong&gt;: 至少有一個系統資源是每次只能被一個process使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持有並等待(Hold &amp;amp; Wait)&lt;/strong&gt;: 存在一個process在我持有某資源的同時，又在等待其他資源的釋放。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非搶斷(No Preemption)&lt;/strong&gt;: process在執行過程中(包括申請資源到結束執行前)不能被中斷，也就代表說process在完成前不會主動或被動釋放占用的資源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循環等待(Circular Wait)&lt;/strong&gt;: 持有並等待的對象形成一個循環迴路。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當這四個條件同時滿足時，就會產生deadlock的情形。此時大家都在互相等待其他人手上的資源，但同時自己手上又握有其他人需要的資源，造成所有process都在等待，陷入死循環。&lt;/p&gt;
&lt;p&gt;在學習的過程中意外的看到一張有意思的圖，下方的塞車圖很好的顯示deadlock的情況，並且若仔細觀察也會發現圖中包含上面提到的四個必要條件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://victorchao996.github.io/p/test/deadlock2.jpg&#34;
	width=&#34;1907&#34;
	height=&#34;1010&#34;
	srcset=&#34;https://victorchao996.github.io/p/test/deadlock2_hu3e01c59fc2348bd848c2eddc8bf7306d_146006_480x0_resize_q75_box.jpg 480w, https://victorchao996.github.io/p/test/deadlock2_hu3e01c59fc2348bd848c2eddc8bf7306d_146006_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;環狀塞車圖&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;453px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我們就上圖來討論造成死結的四個必要條件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;互斥(Mutual Exclusion): 在此圖中&lt;strong&gt;一次只能有一個車輛通過十字路口&lt;/strong&gt;，所以路口這個資源符合互斥的條件&lt;/li&gt;
&lt;li&gt;持有並等待(Hold &amp;amp; Wait): 在此圖中路口的車輛占住了路口這個資源，但&lt;strong&gt;同時又在等待下一個十字路口的暢通&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;非搶斷(No preemption): 很顯然的，被擋住的汽車無法穿過阻擋車，且佔住路口的汽車也不會憑空消失。&lt;/li&gt;
&lt;li&gt;循環等待(Circular Wait):  都在等待下一個路口淨空而產生&lt;strong&gt;循環等待&lt;/strong&gt;。
觀察上圖應該可以發現，沒有一台車可以移動，這就是deadlock發生時的狀況。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那我們要如何避免deadlock(道路阻塞)的情況發生呢? 聰明的你應該立馬就想到了，那就是&lt;strong&gt;打破造成死結的其中一個必要條件&lt;/strong&gt;即可 !&lt;/p&gt;
&lt;h2 id=&#34;打破deadlock&#34;&gt;打破Deadlock!&lt;/h2&gt;
&lt;p&gt;那我們應該要從哪一點下手呢? 剛剛有解釋塞車圖中分別對應滿足死結的四種條件，其中第三點(非搶斷)是無法解決的，除非車子可以飛起來或穿透障礙物😂；而第四點(循環等待)因為道路設計的關係，只要持有並等待的條件滿足就有可能產生循環等待的狀況，所以一樣無法排除。這樣一來，我們能改善的點就只有第一點&amp;amp;第二點了。&lt;/p&gt;
&lt;p&gt;所以目前有兩種改進方法: 打破互斥&amp;amp;打破持有並等待，現在回顧上圖可以發現這兩點出現的位置&lt;strong&gt;皆在路口處&lt;/strong&gt;，所以我們可以針對十字路口處來做改善。&lt;/p&gt;
&lt;p&gt;其中一個改善的方法就是&lt;strong&gt;拓寬十字路口&lt;/strong&gt;，使得路口可以容納更多的車子；然而這樣還是有一個問題，若十字路口上的車子數量又達到上限時，又會產生deadlock。而剩下最後一個改進方式就是&lt;strong&gt;打破持有&amp;amp;等待&lt;/strong&gt;，只要**不要讓單一車子/或一群車子佔有十字路口這個&amp;quot;資源&amp;quot;**即可，也就是限制車子不得停在十字路口上。這樣就可以有效的避免deadlock的產生，也就比較不容易造成阻塞囉 !&lt;/p&gt;
&lt;p&gt;現在你應該能明白，為什麼要在十字路口設置黃色網狀線了。除了保持路口暢通外，還可以有效避免一定範圍內的塞車情況。雖然避免deadlock並不是主要的目的，畢竟大十字路口上有紅綠燈管制，而小巷子也不會有有這麼多車同時進入。現實世界的道路往往更複雜也更難預料，不過做為道路設計與規劃的一部分還是很值得探討的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;圖片素材來源&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封面圖片: &lt;a class=&#34;link&#34; href=&#34;https://m.facebook.com/chengxiungmath/photos/a.104541441121276/418554636386620/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://m.facebook.com/chengxiungmath/photos/a.104541441121276/418554636386620/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;塞車圖片: &lt;a class=&#34;link&#34; href=&#34;https://denninginstitute.com/itcore/processes/Dead.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://denninginstitute.com/itcore/processes/Dead.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>關於大三專題我學到的十件事</title>
        <link>https://victorchao996.github.io/p/independent-study-project-10things/</link>
        <pubDate>Sun, 03 Jul 2022 16:17:03 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/independent-study-project-10things/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/independent-study-project-10things/lesson.jpg" alt="Featured image of post 關於大三專題我學到的十件事" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;大三下課程結束，也就意味著專題也告一段落，趁著還沒忘記這段寶貴的經驗之前，趕緊來回顧並總結自己這兩個學期學到的幾件事情。因為可以記錄的事情真的很多，所以這篇會比較著重在自己歸納出這兩個學期學習到的&lt;strong&gt;經驗&lt;/strong&gt;，我會盡量不要提及太多技術相關的名詞，讓焦點專注在經驗上，希望這篇文章對未來閱讀的讀者(包括我自己)有實質的幫助。&lt;/p&gt;
&lt;p&gt;至於整個專題使用到的技術以及遇到的困難，我會另外寫在其他篇文章上。&lt;/p&gt;
&lt;h2 id=&#34;學到的寶貴經驗&#34;&gt;學到的寶貴經驗&lt;/h2&gt;
&lt;p&gt;下面就列舉&lt;strong&gt;十個&lt;/strong&gt;我學習到的寶貴經驗，雖然我自認為混了兩個學期，不過仔細回想還是有學到不少內容。我打算把它寫下來，好說服自己多少還是有學到點東西。&lt;/p&gt;
&lt;h3 id=&#34;做好充足的準備再下決定&#34;&gt;🪄做好充足的準備再下決定&lt;/h3&gt;
&lt;p&gt;當初大二下在找專題指導教授的時候沒有好好的評估與思考就直接決定要加入現在的實驗室，現在往回看總覺得沒有好好地評估過在下決定有點可惜。當時沒有認真思考實驗室方向與未來生涯的發展性，如果我可以回到過去，我一定會仔細的評估以下三點: &lt;strong&gt;教授的專長&amp;amp;實驗室的技術方向、教授的指導態度、專題生的參與度&lt;/strong&gt;，而興趣應該要放在這三點之後。&lt;/p&gt;
&lt;p&gt;以當時的眼界與知識廣度絕對無法讓我決定出當前最好的選擇，不過就我所知有參加專題說明會的教授中，這個教授以及他的實驗室所做的方向最接近我有興趣的開發，也就是&lt;strong&gt;遊戲開發&lt;/strong&gt;。於是我就選擇加入了。&lt;/p&gt;
&lt;p&gt;至於實驗室實際情況如何(笑)，我會另開一篇文章來寫，能談的東西實在太多了。&lt;/p&gt;
&lt;h3 id=&#34;好的溝通幫你省時間&#34;&gt;🪄好的溝通幫你省時間&lt;/h3&gt;
&lt;p&gt;好的溝通真的很重要!這個觀念是我上半學期最大的感想。當初參與計畫端的會議時有一起討論，不過計畫端的要求一直不是很明確，有新增修改。除此之外，也許是計畫端那邊的教授很忙同時有很多個案子在跑，所以比較沒有特別關注我這邊開發的東西。最後的結果就是，跟計畫端那邊demo好幾周之後才發現&lt;strong&gt;方向根本做錯&lt;/strong&gt;，浪費了好幾周。&lt;/p&gt;
&lt;p&gt;其實上述問題的發生與計畫端也有一點關係，不過後來仔細想想如果自己夠積極主動是可以避免的，只能說自己還有很大的改進空間。詳細發生的問題會寫在另外一篇上。&lt;/p&gt;
&lt;h3 id=&#34;提前計畫不會吃虧&#34;&gt;🪄提前計畫不會吃虧&lt;/h3&gt;
&lt;p&gt;大三上與大三下的所修的課程偏多，兩學期的課程都有到&lt;strong&gt;21學分(含專題)&lt;/strong&gt;，相較於每學期的最低標準16學分來說應該算滿多的。剛開學的時候還算輕鬆，當期中考周或是期末考周來臨的時候，就會感到時間嚴重不夠用，各種報告&amp;amp;考試都集中在這一兩周內，壓力有夠大。&lt;/p&gt;
&lt;p&gt;所以提前規劃好各種事情比較不會手忙腳亂。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://victorchao996.github.io/p/independent-study-project-10things/Test_and_Homework.jpg&#34;
	width=&#34;1050&#34;
	height=&#34;242&#34;
	srcset=&#34;https://victorchao996.github.io/p/independent-study-project-10things/Test_and_Homework_hu66b04167eb7bc5feb0da95d25dd9c2d2_96130_480x0_resize_q75_box.jpg 480w, https://victorchao996.github.io/p/independent-study-project-10things/Test_and_Homework_hu66b04167eb7bc5feb0da95d25dd9c2d2_96130_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;圖片: 大三上期末-考試&amp;報告轟炸&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;433&#34;
		data-flex-basis=&#34;1041px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;有些事情不是你的錯但卻是你的責任&#34;&gt;🪄有些事情不是你的錯，但卻是你的責任&lt;/h3&gt;
&lt;p&gt;剛加入實驗室的時候，原本要做的項目有學長的專案可以參考，但後來發現學長開發的專案所使用的&lt;strong&gt;設備已經停產&lt;/strong&gt;了。而且更慘的是，深入研究學長的專題後發現，專案中的程式碼是來自設備商發佈在平台上的開發套件(姑且稱他為prefab吧)，總而言之就是一個可以直接拿來用的套件，前提是要使用他們家的產品。&lt;/p&gt;
&lt;p&gt;當時我遇到的第一個大問題就是，我要拿著&lt;strong&gt;新的設備來達到相近的功能，但我沒有可以參考的script&lt;/strong&gt;。而我遇到的第二個問題是，&lt;strong&gt;實驗室沒有人做過類似的，連碩班學長都沒有&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有一段時間真的有點崩潰，我想要達到的功能網路上相關的資料很少，應該說幾乎沒有。為什麼相關資料很少呢? 這就跟我想要達到的功能有關了。老師的要求是希望能用設備來控制遊玩，就像是學長專題做的東西。然而，實驗室所購買的這個設備是一個&lt;strong&gt;完整的產品&lt;/strong&gt;，開發商販賣這個設備的目的是希望買家可以購買他們製作的遊戲，換句話說，是為了讓玩家體驗這款遊戲而販賣這個設備。&lt;strong&gt;這個設備被販賣目的從一開始就不是為了開發&lt;/strong&gt;，自然而然在官網上就不會出現針對這個設備的開發文件、開發套件、或API可以讓我來研究使用。&lt;/p&gt;
&lt;p&gt;這也間接導致我大三上學期整個進度大當機，只能先去做比較次要的開發，好讓每周的meeting內容看起來不會這麼水。不過最後還是躲不掉老師的提問，有好幾周都只能尷尬的回說，「這部分我還在努力研究中&amp;hellip;」。&lt;/p&gt;
&lt;p&gt;抱怨歸抱怨，不過這也是當時我自己需要克服的問題；我想說的是，&lt;strong&gt;有些事情不是你的錯，但卻是你的責任。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;別跟自己過不去&#34;&gt;🪄別跟自己過不去&lt;/h3&gt;
&lt;p&gt;除了上面提到問題，還有不少讓我灰心的各種事情，包括開發的項目與我當初加入實驗室前的期望不同、製作的遊戲很無聊、教授的態度等等。&lt;/p&gt;
&lt;p&gt;導致我大三上有好一段時間心情很沮喪(尤其是期中周前後&amp;amp;期末事情一多的時候)，算是進入一個&lt;strong&gt;低潮期&lt;/strong&gt;吧。那段時間常常出現自我懷疑，尤其在與同學聊天的過程中了解到同學們在專題上的所學與進度之後，我就會問自己:「你現在在幹嘛? 這真的是你希望的嗎? 你對現在的生活滿意嗎?」，而答案顯而易見: &lt;strong&gt;我很不滿意&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;後來我心念一轉，&lt;strong&gt;很多事情不是我能控制的&lt;/strong&gt;，因此&lt;strong&gt;只需要專注在我能努力的事情&lt;/strong&gt;就好，至於我無法改變的事情就隨他去吧。除此之外，在寒假休息期間我也鼓勵自己下個學期無論如何都要努力把這個這個功能給做出來，不然以後的我肯定會很後悔。&lt;/p&gt;
&lt;p&gt;我必須說，壓力大的時候做點可以舒緩壓力的事情真的很重要! 無論是打球運動、看影片玩遊戲、聽音樂娛樂，或甚至找朋友聊聊都很有幫助。特別感謝與我同一個實驗室的專題生&lt;strong&gt;小崴&lt;/strong&gt;時常在meeting完之後陪我吃飯聊天，雖然我們加入的計畫不同，但都有遇到各種鳥事XD，互相吐苦水大大的幫助我紓解壓力。所以壓力大的時候別跟自己過不去，撐到最後才是真的!&lt;/p&gt;
&lt;h3 id=&#34;不要指望別人會對你有幫助&#34;&gt;🪄不要指望別人會對你有幫助&lt;/h3&gt;
&lt;p&gt;在前面提到的低潮期中，我甚至還一度萌生出擺爛的想法，總想著如果讓老師調人來支援我，或乾脆老師把我換到別的計畫底下去做那該有多好。但那也只是我在壓力大的時候所產生的想法罷了，最後也沒有如願發生。&lt;/p&gt;
&lt;p&gt;後來我想通了一件事那就是，&lt;strong&gt;「不要期待別人總會對你有幫助」&lt;/strong&gt;。每個人都有自己的事情要忙，而且實際上他們也沒有義務要幫忙，所以很多事情還是要靠自己來，俗話說的好:&lt;strong&gt;「師父領進門，修行在個人。」&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;真的不行的時候還是要尋求幫助&#34;&gt;🪄真的不行的時候還是要尋求幫助&lt;/h3&gt;
&lt;p&gt;雖然才說不要期待別人會對你有幫助，但這樣講並不代表你不能主動去尋求幫助。事實上，當一件事需要花費大量的時間跟力氣來做，卻仍然沒有什麼實質進展時，這時反而要&lt;strong&gt;檢討自己是不是方法不正確&lt;/strong&gt;。當遇到困難時，比起自己埋頭苦幹，尋求他人的意見或幫助才是正確的。&lt;/p&gt;
&lt;p&gt;在這邊也要特別感謝Yo學長的幫助，在我遇到困難的時候有丟一些網路的資料，或是提供我一些想法，甚至提供我對這方面有經驗的開發者的微信帳號讓我可以向他請教問題(雖然最後還是沒有幫助就是了XD)。另外也要特別感謝Yang學長的幫助，在我開發上遇到困難時，幫助我分析問題可能的原因。沒有這兩人的幫助，我沒有辦法順利的完成這個專題成果。&lt;/p&gt;
&lt;h3 id=&#34;你認為很基本的事情在其他人眼中可能看起來很難&#34;&gt;🪄你認為很基本的事情在其他人眼中可能看起來很難&lt;/h3&gt;
&lt;p&gt;在上面提到的問題終於解決的時候，還記得有不只一個研究生跟我說你這個真的厲害，直接硬幹寫出來。但如果將我達到最終結果的步驟一一拆解，其實也沒有用到多艱深的技術，在查找資料的過程中，我也很幸運的找到某位大大在GitHub上開源的API，使用這個API我就可以在使用的軟體中獲取到藍芽設備傳送過來的data。最後經過一番臨摹參考別人的scipt才得以客製化一個能在專案中使用的script，其中也包括&lt;strong&gt;轉換設備傳送來的原始數據&lt;/strong&gt;，這也是為什麼學長會覺得硬幹真的猛。但講真的，如果該設備一開始就有開發套件可以使用，那我也不需要為了這件事情焦頭爛額半個學期，我也可以花更多時間在改善其他部份上。&lt;/p&gt;
&lt;h3 id=&#34;人都是自私的&#34;&gt;🪄人都是自私的&lt;/h3&gt;
&lt;p&gt;在遇到困難的那幾周meeting時，我在報告的簡報中都會放上遇到的困難，希望讓老師了解我無法解決。我也在幫自己找理由，試圖製造出&lt;strong&gt;我努力過了，但我就是無法&lt;/strong&gt;的假象，但當我後來發現老師根本不太在乎，也不想幫我的時候，我就改變主意了。&lt;/p&gt;
&lt;p&gt;我不再提出我遇到的困難，變成單純的報告自己完成的進度。我甚至會在比較忙的時候把&lt;strong&gt;已經完成的進度&lt;/strong&gt;分成兩周來報告，剛加入實驗室的熱情早已燃燒殆盡，只剩交差了事。個人心境的變化可以談的比較多，而這跟我們實驗室的專題性質有很大的關係，之後會在另一篇文章中分享，總而言之就是我最後也&lt;strong&gt;逐漸走向偷懶的道路&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人都是自私的&lt;/strong&gt;，教授也是、學長也是，我也是。&lt;/p&gt;
&lt;h3 id=&#34;一切都是最好的安排&#34;&gt;🪄一切都是最好的安排&lt;/h3&gt;
&lt;p&gt;現在這個時間點往回看這兩個學期的日子，雖然有非常多的事情可以吐槽，但我也學到非常多事。我認為自己的&lt;strong&gt;軟實力&amp;amp;硬實力&lt;/strong&gt;都有所提升，提升的程度比起過去修過的任何一堂課程都來的有效果。這兩學期的經驗與過去的學習經驗不大相同，以往我都不太會認真思考並嘗試自己解決問題，遇到問題時通常都是先上網找解答，這個壞習慣也讓我嘗到苦頭。經過這兩學期，我深刻的瞭解到，自己應該要先專研過再去尋找答案，不然若網路上沒有直接的解決方法那豈不是就無解了嗎?&lt;/p&gt;
&lt;p&gt;藉此機會我也了解到為什麼資工系的必修課程我都學不太好，這都是&lt;strong&gt;不求甚解&lt;/strong&gt;的後果，畢竟很多時候作業網路上都有解答對吧? 關於這個問題我之後也會寫一篇文章來分享。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;以上就是我大三專題這兩個學期學到的十件事情，這是我第一次寫這麼長的回顧文，不過機會難得想說稍微記錄一下。這篇文章也會是我發佈在&lt;strong&gt;個人網站&lt;/strong&gt;上的第一篇文章，有一句話是這麼說的，&lt;strong&gt;「寫作，是最好的自我投資。」&lt;/strong&gt;，我很想看看這句話是不是真的，試想自己如果持續公開寫作1年、5年，甚至10年? 成果怎麼樣我不知道，但我會試試看。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>

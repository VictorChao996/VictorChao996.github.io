<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Victor&#39;s Blog</title>
        <link>https://victorchao996.github.io/</link>
        <description>Recent content on Victor&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 08 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://victorchao996.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>第四周-vue基礎</title>
        <link>https://victorchao996.github.io/p/frontend_learning-fourth-week/</link>
        <pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/p/frontend_learning-fourth-week/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/frontend_learning-fourth-week/JavaScript.jpg" alt="Featured image of post 第四周-vue基礎" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上週學習的內容主要是Vue框架的基礎，在學習入門的過程(包含看書本、看教學影片、官方教學、文件等)時發現自己對於原生JS還不夠熟悉，以至於沒有辦法有效率的學習框架，或體會到使用前端框架的好處。僅能從其他人的介紹中得知使用Vue框架的一些好處。&lt;/p&gt;
&lt;p&gt;雖然看了許多基礎內容，但有鑑於現階段學習Vue 會遇到相對尷尬的問題就是Vue 2 &amp;amp; Vue 3的不同。並且Vue 3 新增的Composition API 寫法又會使得跟著網路教材學習起來相對不太容易。有鑑於版本&amp;amp;不同的API風格，以下就整理一些Vue的共通觀念。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;主要學習內容&#34;&gt;主要學習內容&lt;/h2&gt;
&lt;h3 id=&#34;mvvm-架構&#34;&gt;MVVM 架構&lt;/h3&gt;
&lt;p&gt;以前有聽過MVC架構，也就是model-view-controller，是一種將應用程式分割成三種不同邏輯元件的&lt;strong&gt;設計模式&lt;/strong&gt;，有助於專案的協作開發。而不同的MVC架構，Vue參考了MVVM架構的設計，那什麼是MVVM架構?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://victorchao996.github.io/p/frontend_learning-fourth-week/mvvm.png&#34;
	width=&#34;1600&#34;
	height=&#34;850&#34;
	srcset=&#34;https://victorchao996.github.io/p/frontend_learning-fourth-week/mvvm_hud42b3306f5891f5e1c1e0cd5099ec400_43685_480x0_resize_box_3.png 480w, https://victorchao996.github.io/p/frontend_learning-fourth-week/mvvm_hud42b3306f5891f5e1c1e0cd5099ec400_43685_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Vue MVVM 架構圖&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;MVVM為&lt;strong&gt;model-view-viewmodel&lt;/strong&gt;的縮寫，這三者分別代表不同的邏輯元件。對應到網頁開發可以將其整理成一下的重點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model:
&lt;ul&gt;
&lt;li&gt;資料處理&lt;/li&gt;
&lt;li&gt;Plain JavaScript Object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;View:
&lt;ul&gt;
&lt;li&gt;網頁畫面&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;View Model
&lt;ul&gt;
&lt;li&gt;實現DOM Listener&lt;/li&gt;
&lt;li&gt;實現 Data Bindings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vue的核心功能就是扮演View model的角色，經由宣告式(聲明式)的渲染就可以不用親自的操作DOM。藉由Vue能使工程師更專注於UI &amp;amp; Data的在網頁上的呈現，並且程式邏輯能更專注於data的處理，而不是在思考要如何操作DOM。&lt;/p&gt;
&lt;h3 id=&#34;vue的特殊語法&#34;&gt;Vue的特殊語法&lt;/h3&gt;
&lt;p&gt;vue有兩種特殊的語法用於幫助程式設計師撰寫比起原生JS更簡潔的&amp;amp;更有效率的執行程式 &lt;strong&gt;(借助Virtual DOM的力量)&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;插植語法&#34;&gt;插植語法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;功能: 用於解析&lt;strong&gt;標籤體內的內容&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;寫法: &lt;code&gt;{{ }}&lt;/code&gt; ，用於接收data中的所有屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;v-指令語法&#34;&gt;v-指令語法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;功能: 用於解析標籤(標籤屬性、綁定事件)&lt;/li&gt;
&lt;li&gt;例: &lt;code&gt;&amp;lt;v-bind:href=&amp;quot;url&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中插植語法提供了顯示單向綁定(data-&amp;gt;UI)的功能，而使用v-指令語法則可以具有各種綁定功能(雙向綁定、事件綁定、樣式綁定、條件渲染等)&lt;/p&gt;
&lt;h3 id=&#34;常見v-指令&#34;&gt;常見V-指令&lt;/h3&gt;
&lt;p&gt;善用v-指令可以大大的降低程式碼的長度，下面整理了一些基礎常見的v-指令。&lt;/p&gt;
&lt;h4 id=&#34;v-bind&#34;&gt;v-bind&lt;/h4&gt;
&lt;p&gt;使用插植語法可以很方便地將data屬性中的資料(Options API) 或 ref( )與reactive()的資料(Composition API)的資料應用在HTML tag的內容中。但插植語法卻沒有辦法在HTML tag 的attribute上，有鑑於此，Vue提供了v-bind指令，可以將data用於屬性上。&lt;/p&gt;
&lt;p&gt;利用v-bind指令即可實現動態調整CSS樣式或tag屬性。
範例: 動態指定image URL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-bind:src&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;url&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./image.png&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因為太常用所以Vue提供的簡寫，例如下面兩者寫法是一樣的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-bind:src&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;url&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:src&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;url&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;v-on&#34;&gt;v-on&lt;/h4&gt;
&lt;p&gt;vue也提供了綁定事件的指令v-on，以下為最簡單的事件範例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-on:click&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;doThis&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;這時有些人可能會想，那這樣不就跟原來將onclick寫在HTML上面無差別嗎?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doThis&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;舊的寫法將綁定事件寫死在HTML標籤中，相較於將HTML與JS分開的寫法&lt;strong&gt;缺乏彈性與可變性&lt;/strong&gt;，於是之後就藉由DOM來綁定事件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;btn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(.&lt;span style=&#34;color:#a6e22e&#34;&gt;btnclass&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//事件綁定方法一
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;btn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onclik&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//事件綁定方法二: 使用addEventListener
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;btn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;functoin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;preventDafult&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;雖然分開HTML &amp;amp; JS 有諸多好處，但vue提出的component概念的主要目的為減少DOM的操作，且希望開發者能藉由觀看&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;就明白UI 介面&amp;amp;事件觸發的關係，於是就產生了類似在HTML上指定屬性的寫法。不過v-on的好處是提供了JS event相關常用的修飾子。例如上面的btn事件綁定可以寫成:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-on:click.prevent&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;fun&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;處此之外還有&lt;code&gt;.stop&lt;/code&gt; &lt;code&gt;.once&lt;/code&gt; &lt;code&gt;.capture&lt;/code&gt; 等與 JS event機制有關的設定。&lt;/p&gt;
&lt;p&gt;因為事件綁定很常用所以vue也提供了縮寫符號: @&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@click.prevent&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;fun&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@keyup.enter&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;onEnter&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;v-on&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;{ mousedown: doThis, mouseup: doThat }&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;可以使用在component上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;MyComponent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@my-event&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;handleThis&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;v-ifv-show&#34;&gt;v-if/v-show&lt;/h4&gt;
&lt;p&gt;vue提供了條件渲染指令，可以根據指定的value來決定是否要渲染template到頁面上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;範例:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;isShow&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;v-show&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;isShow&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-show&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;兩個指令所達到的效果都是控制元素是否出現在畫面上，然而他們實作的方法不同，&lt;strong&gt;前者是會直接移除HTML element，後者則是使用CSS屬性來隱藏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;兩者使用情況比較如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v-if
&lt;ul&gt;
&lt;li&gt;可搭配&lt;code&gt;v-else-if&lt;/code&gt;, &lt;code&gt;v-else&lt;/code&gt; 使用&lt;/li&gt;
&lt;li&gt;適用結果幾乎不變的情況，以此降低browser的渲染&amp;amp;DOM生成成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;v- show
&lt;ul&gt;
&lt;li&gt;適用DOM狀態需要被保留的情況&lt;/li&gt;
&lt;li&gt;適用DOM狀態會頻繁更動的情況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;v-for&#34;&gt;v-for&lt;/h4&gt;
&lt;p&gt;除了一般的條件渲染，vue也提供了方便列表渲染的指令。可以讓開發者以更簡便&amp;amp;直觀的方式撰寫template(HTML)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;範例1: 根據reactive data來渲染HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;item in arr&amp;#34;&lt;/span&gt;&amp;gt;{{ &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;範例2: 條列顯示物件(Object) 資料&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;(item, index) in arr&amp;#34;&lt;/span&gt;&amp;gt;{{ &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; }} &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt; {{&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;}}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;有了v-for指令就能&lt;strong&gt;減少手動更新list的data &amp;amp; 更新畫面的步驟&lt;/strong&gt;(繁複的DOM 操作)，讓開發者能更專注在data 與 UI 的關係上。&lt;/p&gt;
&lt;h4 id=&#34;v-model&#34;&gt;v-model&lt;/h4&gt;
&lt;p&gt;最後也是最重要的雙向綁定指令，在高互動性的網頁中，表單類型的元素是不可或缺的(例: &lt;code&gt; &amp;lt;input&amp;gt; 、&amp;lt;textarea&amp;gt; 、&amp;lt;select&amp;gt;&lt;/code&gt;等)。不同於v-bind只能實現單向綁定，v-model實現了真正的雙向綁定，不過它本質上是一種語法糖。&lt;/p&gt;
&lt;p&gt;範例: 當在輸入框中打字，下方文字會立即更新。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-model&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {{ &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt; }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;ref&lt;/span&gt;} &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ref&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;v-model 指令語法糖本質上就是v-bind &amp;amp; v-on 指令做結合使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//兩者本質上相等
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;v-model&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;msg&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-bind:value&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;msg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-on&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;msg = $event.target.value&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;實際上v-model在做的事情就是上面提到的MVVM架構中的ViewModel。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;結語&#34;&gt;結語&lt;/h2&gt;
&lt;p&gt;以上就是一些簡單的關於vue基礎知識的總結。在學習的過程中發現自己對原生 JS 不是說到非常熟悉，以至於在學習有關event的內容是會卡住。也因為還不熟悉JS 事件&amp;amp;事件處理的精隨，以至於無法深刻體會Vue 中 v-指令帶來的好處。&lt;/p&gt;
&lt;p&gt;現在清楚明白自己JS的基礎知識還讀的不夠深入，我認為目前不太適合繼續學習Vue相關的知識。所以下面幾周的學習內容應該會著重在&lt;strong&gt;JS 進階 &amp;amp; Web API 相關的知識&lt;/strong&gt;去做學習。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>2022年回顧</title>
        <link>https://victorchao996.github.io/p/2022review/</link>
        <pubDate>Sat, 31 Dec 2022 16:17:03 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/2022review/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/2022review/2022.jpg" alt="Featured image of post 2022年回顧" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;今年發生許多事情，可以說是充滿挫折&amp;amp;挑戰的一年，不過也是我自認為成長最多的一年。在這個2022年即將結束之際，要來好好回顧一下今年發生的一些事情。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;年度目標&#34;&gt;年度目標&lt;/h2&gt;
&lt;p&gt;去年列出的年度目標已經被我拋在腦後，唯一記得的項目&lt;strong&gt;只有閱讀7本書&lt;/strong&gt; &amp;amp; 準備&lt;strong&gt;研究所升學&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;閱讀七本書&#34;&gt;📕閱讀七本書&lt;/h3&gt;
&lt;h4 id=&#34;起因&#34;&gt;起因&lt;/h4&gt;
&lt;p&gt;去年九月左右意外接觸到Pocast節目 &lt;em&gt;&amp;lt;下一本讀什麼?&amp;gt;&lt;/em&gt; 與 &lt;em&gt;&amp;lt;電扶梯走左邊&amp;gt;&lt;/em&gt; 後，顛覆了我對於課外讀物的認知。&lt;strong&gt;前者讓我認識到有許多的書本具有獨到的見解與觀點，足以改變讀者的一生；而後者則是讓我認識到，廣泛閱讀是所有優秀人物都具有的特點。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;閱讀的多寡對人具有巨大的影響: 從&lt;strong&gt;談吐、待人處事、看事情的角度&lt;/strong&gt;等，都可能隨著知識吸收的多寡而有著不同的差別。節目中的訪談人物談吐有自信且具有內涵，除此之外，他們目標明確且願意跳脫舒適圈去追隨自己的嚮往。聆聽節目的當下總是能獲得力量，這對當時的我來說是很特別的體驗。&lt;strong&gt;對比周遭的人事物的平淡，我對訪談者認真生活的態度產生了嚮往之情&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我希望自己也能變為令人憧憬的存在，於是就此展開我閱讀書本的旅程。&lt;/p&gt;
&lt;h4 id=&#34;第一本書&#34;&gt;第一本書&lt;/h4&gt;
&lt;p&gt;一開始是從 &lt;em&gt;《原子習慣》&lt;/em&gt; 這本經典的工具書開始閱讀(因為家裡剛好有)，如果說Podcast是顛覆我對於閱讀書本的看法，那閱讀 &lt;em&gt;《原子習慣》&lt;/em&gt; 這本書就是顛覆我對於閱讀書本的體驗。&lt;/p&gt;
&lt;p&gt;從小到大都不是很喜歡閱讀純文字的書。看著密密麻麻的文字，光是閱讀的動作就很吃力了，更別提看完當下是否有吸收到內容。在閱讀的過程中完全感受不到快樂，這也導致我基本上不太看課外書籍。如果你在大三之前問我有沒有在讀什麼書籍，我一本也答不上來。&lt;/p&gt;
&lt;p&gt;然而 &lt;em&gt;《原子習慣》&lt;/em&gt; 這本書不同，作者在介紹觀點或相應的方法之前會由故事開頭，再利用故事引述出章節的重點觀念，最後再提供改善習慣的方法。這樣的寫作編排不僅閱讀的過程中很有趣，事後回想重點觀念&amp;amp;方法時也能順著寫作的脈絡快速回顧重點，方便記憶。&lt;/p&gt;
&lt;h4 id=&#34;閱讀更多的書&#34;&gt;閱讀更多的書&lt;/h4&gt;
&lt;p&gt;有了好的經驗做為開頭，我做了不少以前不會去做的行動。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去圖書館借書(並且看完)&lt;/li&gt;
&lt;li&gt;翻看家裡的書本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;買書&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;做讀書筆記&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寫書本閱讀心得&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些行為如果放在2.3年前來看，我一定會覺得自己瘋了，居然自己掏錢買書。不過現在看來這是正確的選擇，並且以後還會持續下去。&lt;/p&gt;
&lt;p&gt;結果現在盤點一整年的閱讀才發現，不知不覺就&lt;strong&gt;看了超過10本書&lt;/strong&gt;，這還未含看到一半的書本，大大超乎我的預期。&lt;/p&gt;
&lt;h3 id=&#34;準備研究所升學&#34;&gt;🏫準備研究所升學&lt;/h3&gt;
&lt;h4 id=&#34;想法產生&#34;&gt;想法產生&lt;/h4&gt;
&lt;p&gt;想要繼續升學的念頭本來不存在，不過大三下(大約3月左右)的時候參加完企業博覽會後就產生轉變。以國立大學資工系的同學來說，大部分的同學都會選擇繼續升學。而&lt;strong&gt;選擇繼續升學的兩大原因: 起薪高 &amp;amp; 不想提早進入職場。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而我的考量是後者，事實上，以我的觀察，很大一部分的同學是對未來感到迷惘。不是&lt;strong&gt;不清楚未來要從事的職業，不然就是因為沒有具備工作需要的技術。&lt;/strong&gt; 在學校的所學不僅沒有使學生更上一層樓，反而消磨學生的信心，至少以資工系所學來說，無法應付工作所需具備的專業知識&amp;amp;技能。&lt;/p&gt;
&lt;h4 id=&#34;痛苦的過程&#34;&gt;痛苦的過程&lt;/h4&gt;
&lt;p&gt;原本的課業成績就不太好，所以研究考試的六大必修科目都不是到很擅長，在暑假準備的過程感覺特別辛苦。然而在準備的過程中我逐漸意識到，&lt;strong&gt;考試這方面我既不擅長也不喜歡&lt;/strong&gt;，每天讀著未來用不到的知識，像極了當初高中準備升學考試的我。我清楚明白，就算我在考試前把這些知識都背的滾瓜爛熟，考試後這些知識就又會被我拋到腦後。&lt;/p&gt;
&lt;p&gt;在明確釐清自己的想法後，我毅然決然在大四上開學時(九月左右)放棄研究所考試。&lt;/p&gt;
&lt;h4 id=&#34;研究所推甄&#34;&gt;研究所推甄&lt;/h4&gt;
&lt;p&gt;在準備研究所考試的前期原本是不打算推甄，因為明白自己的成績不好看，系排趴數也不夠前面，不想浪費時間去準備備審資料。但在家人的鼓勵之下，還是在九月初的時候準備資料並且完成本校的報名流程。&lt;/p&gt;
&lt;p&gt;先說結論，放榜結果為備取300多。很可惜已經超出歷屆能備取上的範圍，確定不可能上。當下其實有點氣，氣的是一方面以為專題競賽有得獎但備取名次卻這麼後面(還以為中央會保本校的QQ)，二方面是投入時間心力卻沒有好的結果。放榜的那幾周直接使我陷入低潮期，對事物提不起勁，大腦不斷產生否定自己的聲音，只能用社群媒體來填補糜爛的自己。事後往回看那個時間點還真是可怕，活了21年沒遇過這麼大的挫折。&lt;/p&gt;
&lt;p&gt;雖然不管是考試還是推甄兩邊都不順利，不過我也在準備的過程中慢慢的發現自己真心喜歡的事物。&lt;strong&gt;我喜歡實作多於理論上的知識，喜歡製作使用者能看到的畫面&amp;amp;功能&lt;/strong&gt;。原本想要成為遊戲工程師的想法也有所改變，心裡想著我說不定能成為一個前端工程師。我也在有了新的目標&amp;amp;生活的意義後，慢慢走出低潮。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;盤點完成的事件&#34;&gt;盤點完成的事件&lt;/h2&gt;
&lt;p&gt;雖然今年遇到的挫折特別多，不過也是有許多值得紀錄的事情。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完成專題進度
&lt;ul&gt;
&lt;li&gt;獲得專題競賽-佳作&lt;/li&gt;
&lt;li&gt;卡了整個學期(大三上)，終於在大三下有重大突破&lt;/li&gt;
&lt;li&gt;順利完成計畫端的遊戲開發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;獲得第一份薪水:
&lt;ul&gt;
&lt;li&gt;被老師邀請去當大一英文課程助教&lt;/li&gt;
&lt;li&gt;協助同學完成自學小組產出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讀完超過10本書:
&lt;ul&gt;
&lt;li&gt;體會到讀書的樂趣&lt;/li&gt;
&lt;li&gt;增廣見聞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人生第一次正式面試
&lt;ul&gt;
&lt;li&gt;去參加AppWorks School Campus Program 的面談&lt;/li&gt;
&lt;li&gt;拍自我介紹影片&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2023年年度目標&#34;&gt;2023年年度目標&lt;/h2&gt;
&lt;p&gt;在2022年的年末，不免俗的也要來立個新年新希望。不用什麼特別的大計畫，只求合理且能達成的就好。&lt;/p&gt;
&lt;h3 id=&#34;健康&#34;&gt;健康&lt;/h3&gt;
&lt;p&gt;我希望能達成的事項or習慣:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;早睡早起(不熬夜也不貪睡)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;盡量睡滿7小時&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;少吃炸物且不過量飲食&lt;/li&gt;
&lt;li&gt;每周運動至少3次，每次至少20分鐘
&lt;ul&gt;
&lt;li&gt;散步or跑步&lt;/li&gt;
&lt;li&gt;打球&lt;/li&gt;
&lt;li&gt;健身運動or健身房&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每日看螢幕時間不超過8小時
&lt;ul&gt;
&lt;li&gt;每次不連續超過2小時&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;知識&#34;&gt;知識&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多看課外書本&lt;/li&gt;
&lt;li&gt;追蹤優質創作者: 觀看其影片、文章、電子報&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;減少無益的社群媒體(IG、FB、Youtube影片)使用時間&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;限制手機app使用&lt;/li&gt;
&lt;li&gt;限制筆電使用情境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;學業事業&#34;&gt;學業/事業&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每天花最少1.5小時自主學習&lt;/li&gt;
&lt;li&gt;輸入&amp;amp;輸出(學習-&amp;gt;重點整理-&amp;gt;筆記-&amp;gt;撰寫文章)&lt;/li&gt;
&lt;li&gt;積極尋找學習的機會(讀書會、面試)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人際關係形象&#34;&gt;人際關係/形象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;約許久未見的同學吃飯&lt;/li&gt;
&lt;li&gt;多笑，多與人打招呼&lt;/li&gt;
&lt;li&gt;改善穿著&lt;/li&gt;
&lt;li&gt;持續經營Blog&lt;/li&gt;
&lt;li&gt;架設個人網站(自介、作品集)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是2023年想要達成的一些目標喇，期許自己能順利的完成。雖然上述各點都沒有那種突破性的事項，但若能全部達成也是一種成就，若2023年有辦法照上面的期望來達成，那一整年肯定是非常充實的。&lt;/p&gt;
&lt;h2 id=&#34;結語&#34;&gt;結語&lt;/h2&gt;
&lt;p&gt;關於2022年的一整年遇到的各種挫折真的可以寫好幾篇文章。但我想了想還是把時間花在其他能讓我成長的事情上好，倘若我真的寫下去，又會陷入一種自己不太好的感覺，這不是我所期望的。希望邁入下一年的過程中，我能把2022年的苦澀給拋在腦後，也期許自己2023年能活得更有意識。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;希望2023年的每一天活的認真又快樂。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;圖片來源: &lt;a class=&#34;link&#34; href=&#34;https://unsplash.com/photos/-64OzuZ8ThE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://unsplash.com/photos/-64OzuZ8ThE&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>第三周-初探Vue框架</title>
        <link>https://victorchao996.github.io/p/frontend_learning-third-week/</link>
        <pubDate>Sun, 25 Dec 2022 18:00:00 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/frontend_learning-third-week/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/frontend_learning-third-week/JavaScript.jpg" alt="Featured image of post 第三周-初探Vue框架" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;第二周紀錄的主要學習內容是JavaScript的基礎&amp;amp;進階概念，而本周主要的學習內容是認識框架(Vue.js)。&lt;/p&gt;
&lt;p&gt;在前端框架三支柱中(Angular、React、Vue)為什麼會選擇Vue來做學習呢? 其實是看中Vue框架主打的&lt;strong&gt;輕便性&lt;/strong&gt;，另外也聽說官方文件易於閱讀學習，於是就果斷選擇Vue來入門。&lt;/p&gt;
&lt;h3 id=&#34;三大框架簡單比較&#34;&gt;三大框架簡單比較&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Angular:
&lt;ul&gt;
&lt;li&gt;由Google support&lt;/li&gt;
&lt;li&gt;各種功能完善，相對的學習曲線較高&lt;/li&gt;
&lt;li&gt;需使用TypeScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React:
&lt;ul&gt;
&lt;li&gt;由Facebook(Meta) support&lt;/li&gt;
&lt;li&gt;使用JSX&lt;/li&gt;
&lt;li&gt;需要接觸第三方插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vue:
&lt;ul&gt;
&lt;li&gt;由Vue團隊support&lt;/li&gt;
&lt;li&gt;使用HTML寫法&lt;/li&gt;
&lt;li&gt;SFC將 HTML、JavaScript、CSS分開&lt;/li&gt;
&lt;li&gt;漸進式框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主要學習內容&#34;&gt;主要學習內容&lt;/h2&gt;
&lt;h3 id=&#34;為何要使用框架&#34;&gt;為何要使用框架?&lt;/h3&gt;
&lt;p&gt;傳統網站開發使用HTML、CSS、JavaScript 將網站的骨架、樣式、邏輯控制分開的寫法在小型的網站上還能應付，然而當網站的架構逐漸擴大，&lt;strong&gt;開發維護&lt;/strong&gt;上就會產生各種各樣的問題。&lt;/p&gt;
&lt;h4 id=&#34;網站互動元素開發&#34;&gt;✒️網站互動元素開發&lt;/h4&gt;
&lt;p&gt;原先使用JavaScript操作DOM的方法很不直觀，儘管後來有出現 jQuery 可以使開發者有更完善與簡潔的方法來達成網頁元素的互動，但部分項目仍然會頻繁的操作DOM。而Vue採用&lt;strong&gt;模板語法&lt;/strong&gt;的方式&amp;amp;監聽特定節點的值(&lt;strong&gt;宣告式渲染&lt;/strong&gt;)來代替開發者實際操作DOM，可使開發者在開發複雜的互動UI時更加直觀。&lt;/p&gt;
&lt;h4 id=&#34;效能優化&#34;&gt;✒️效能優化&lt;/h4&gt;
&lt;p&gt;開發者藉由JavaScript DOM API 可以操作&amp;amp;更改網頁的HTML元素，但操作DOM會增加網頁渲染的成本(Repaint or Reflow)，使得網頁效能較差。&lt;/p&gt;
&lt;p&gt;因為這個理由，Vue使用了&lt;strong&gt;Virtual DOM&lt;/strong&gt; 的概念。利用JavaScript物件紀錄現有的DOM結構，當資料狀態改變的時候建立Virtual DOM 與新的DOM結構，再利用演算法分析兩個DOM差異, 最後再根據紀錄來執行渲染的函式，完成實體DOM的更新。&lt;/p&gt;
&lt;p&gt;Virtual DOM 的概念可以避免網頁效能低落。&lt;/p&gt;
&lt;h4 id=&#34;組件化ui&#34;&gt;✒️組件化UI&lt;/h4&gt;
&lt;p&gt;在現代複雜的網頁開發中，網站可能會重複出現元素(卡片畫面、按鈕、表格等)，將重複的元素寫成一個 &lt;strong&gt;組件(component)&lt;/strong&gt; 能使得專案較易於開發&amp;amp;維護。&lt;/p&gt;
&lt;p&gt;Vue中的SFC(single file component)中分為三個部分: 
&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 分別對應HTML、JavaScript、CSS 。 當定義好組件的內容後，透過import 的方式就可以&lt;strong&gt;重複使用組件&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;vue-的特色&#34;&gt;Vue 的特色&lt;/h3&gt;
&lt;p&gt;再了解為何要使用框架並選擇學習Vue後，不免俗的要來介紹Vue的特色。理解框架的特色&amp;amp;使用情境對於學習Vue有很大的幫助。&lt;/p&gt;
&lt;h4 id=&#34;採用宣告式渲染&#34;&gt;⭐採用宣告式渲染&lt;/h4&gt;
&lt;p&gt;比起原生JavaScript 藉由DOM來更新UI的方法(指令式宣告)，Vue採用宣告式渲染(Declarative Rendering),
能讓開發者能更專注在UI &amp;amp; 資料的關係上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Counter範例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;createApp&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createApp&lt;/span&gt;({ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;() { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).&lt;span style=&#34;color:#a6e22e&#34;&gt;mount&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#app&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;click&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count++&amp;#34;&lt;/span&gt;&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Count is: {{ count }} 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;響應式ui&#34;&gt;⭐響應式UI&lt;/h4&gt;
&lt;p&gt;Vue會自動追蹤JavaScript的state，並且有效率的更新DOM。&lt;/p&gt;
&lt;h4 id=&#34;漸進式框架&#34;&gt;⭐漸進式框架&lt;/h4&gt;
&lt;p&gt;Vue的&lt;strong&gt;核心只關注在View layout的呈現&lt;/strong&gt;，並提供minimal且必要的功能給使用者。隨者開發上的需求的增加，可以再&lt;strong&gt;引入其他的函式庫或工具&lt;/strong&gt;來處理各種功能，例如: vue-router處理前端路由、vuex的狀態管理等。&lt;/p&gt;
&lt;h4 id=&#34;單檔案組件sfc&#34;&gt;⭐單檔案組件SFC&lt;/h4&gt;
&lt;p&gt;Vue支援以.vue為副檔名的檔案來定義一個完整的組件，SFC能清楚地將架構與組件的關係給分割。在複雜的專案中，SFC能有更高的可讀性&amp;amp;重複使用性。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;這周的內容就先整理到這邊，雖然有稍微玩了一下vue特有的各種神奇指令(v-bind、v-model等)，但我想先把重點整理過在打成文章。另外，我總覺得應該要分別用原生JS &amp;amp; Vue來製作一個小的專案後(例如ToDo app 之類的)，才能更加理解前端開發上使用框架的好處。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>書本閱讀系列-首篇</title>
        <link>https://victorchao996.github.io/p/readingoutput-opening/</link>
        <pubDate>Sun, 18 Dec 2022 18:00:00 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/readingoutput-opening/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/readingoutput-opening/reading.jpg" alt="Featured image of post 書本閱讀系列-首篇" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;自從去年年末意外開啟閱讀課外書這條路後，陸陸續續的看了快十本書。我沒有特別強求閱讀的數量，反而是很隨意的看，有時心血來潮可以把半本書看完，而忙的時候也可能一周完全沒有碰書。&lt;/p&gt;
&lt;p&gt;有的書本會迫不及待的一直讀下去，而有的書本則是讀得不太順，稍微翻看個兩三頁就會想要放下。&lt;/p&gt;
&lt;p&gt;今年就在這麼佛系閱讀的情況下讀完了超過十本書，我自己都沒料到。然而此時便產生了新的問題，因為沒有特別筆記的關係，書本的內容看完就忘，於是就有了撰寫書本閱讀系列文的想法。&lt;/p&gt;
&lt;h2 id=&#34;廣泛閱讀&#34;&gt;廣泛閱讀?&lt;/h2&gt;
&lt;p&gt;原本以為今年的閱讀書本類型會集中在工具書或自助書(self-help)，因為幫我打開閱讀世界大門的書本就為自助書。而那本書就是持續在銷售排行榜上，即使不怎麼看書的人都聽過的 &lt;em&gt;&lt;strong&gt;原子習慣(Atomic Habits)&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;但隨後在又在Podcast 閱讀前哨站的頻道中了解到許多有趣的書籍，因此從網路平台上購買了一些書本。目前讀完的書本可以大致分為一下幾類:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自助書&lt;/strong&gt; : &lt;em&gt;原子習慣(Atomic Habits)、生時間(Make Time)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寓意故事/ 科幻小說&lt;/strong&gt; : &lt;em&gt;牧羊少年的奇幻旅程、呼吸(Exhalation)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人物對話、心理學&lt;/strong&gt; : &lt;em&gt;被討厭的勇氣、蛤蟆先生去看心理師、我想為你推薦一本書&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人生哲學&lt;/strong&gt; : &lt;em&gt;最後十四堂星期二的課、活出意義來(Man&amp;rsquo;s search for meaning)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;靈性&lt;/strong&gt; : &lt;em&gt;當下的力量(The Power of now)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;針對自助書或是知識相關的書籍也許能使用作筆記的方式撰寫讀書心得吧，但相較於這類書籍，人物對話或是寓意類的故事就比較注重的是&lt;strong&gt;閱讀當下的體驗&lt;/strong&gt;。我認為後者帶給我的震撼感是遠超前者的，然而可惜的是，現代人普遍沒有那個心思去慢慢體驗&amp;amp;閱讀書本。&lt;del&gt;要說震撼度的話可能還輸給抖音上的跳舞影片&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;撰寫內容&#34;&gt;撰寫內容&lt;/h2&gt;
&lt;p&gt;因此除了所有書本都能寫的內容如: 書本資訊、書本簡介、適合什麼人閱讀、個人閱讀心得外，我會額外針對不同類型的書本增加段落。 例如自助書類會有&lt;strong&gt;新的知識連結&lt;/strong&gt;，寓意故事則會有&lt;strong&gt;故事&amp;amp;討論&lt;/strong&gt;等。而這些新的段落也會根據書本的不同來做調整，唯一不變的是，我希望這些段落中的內容都能更加貼近現實生活。&lt;/p&gt;
&lt;p&gt;我發現，唯有跟自己的生活作連結才能更有效的記住書本中的內容，這也類似我們大腦吸收新知&amp;amp;回憶事件的方法。若單單只是將書本的重點記錄下來，對他人與自己的幫助都不大，畢竟網路上有更多優秀的重點整理可以去看。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;講了這麼多，我最終的目的就是希望藉由接下來撰寫的文章可以加深我對書本的印象。除此之外，也可以讓我快速回想書本內容，在別人需要書本推薦的時候我可以清楚地介紹書本的內容&amp;amp;特色這樣。那以上就是書本閱讀系列開篇的所有內容了，下一篇預計會從書本: &lt;em&gt;&lt;strong&gt;我想為你推薦一本書&lt;/strong&gt;&lt;/em&gt; 作為本系列文分享文的第一篇。今天看什麼? 我們下次見!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>第二周-JavaScript基礎&amp;進階</title>
        <link>https://victorchao996.github.io/p/frontend_learning-second-week/</link>
        <pubDate>Sun, 18 Dec 2022 18:00:00 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/frontend_learning-second-week/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/frontend_learning-second-week/JavaScript.jpg" alt="Featured image of post 第二周-JavaScript基礎&amp;進階" /&gt;&lt;h2 id=&#34;挑戰破功&#34;&gt;挑戰破功?&lt;/h2&gt;
&lt;p&gt;上週因為在準備AppWors School Campus Program 面試的關係就沒有出文章(&lt;del&gt;挑戰才剛開始就失敗&lt;/del&gt;)，這周要好好來惡補一下進度。在前端學習的部分並沒有實際的計畫學習的內容，只有根據不熟的方面加減看一下。&lt;/p&gt;
&lt;p&gt;這兩周課餘時間主要集中在JavaScript 進階 與 前端框架Vue 的學習，關於學習的內容我會拆成好幾篇來發。雖然希望可以忠實的呈現每一週的學習內容，但礙於時間比較零散，再加上單純紀錄容易變成流水帳，所以之後的學習內容重點整理可能會跨周分享。&lt;/p&gt;
&lt;p&gt;希望學習紀錄&amp;amp;重點筆記的比例能各站50%這樣。&lt;/p&gt;
&lt;h2 id=&#34;主要學習內容&#34;&gt;主要學習內容&lt;/h2&gt;
&lt;h3 id=&#34;javascript-基礎&#34;&gt;JavaScript 基礎&lt;/h3&gt;
&lt;p&gt;程式語言共有的基礎知識: 變數、陣列、迴圈、條件判斷式、function都大同小異，這方面沒什麼太大的問題，比較特別的是JavaScript的資料型別還分為六種基本(primitives) &amp;amp; Object，而最重要的就是Object.&lt;/p&gt;
&lt;h4 id=&#34;object&#34;&gt;Object&lt;/h4&gt;
&lt;p&gt;學習 Object 對完整了解 JavaScript 來說非常重要，在JavaScript中幾乎所有東西都可以是Object 。Object由 property(name) &amp;amp; Value 組成，可對應至其他程式語言中的 key-value pair 結構，如: Python 中的 Dictionaries、C 中的 Hash tables。因為其內容是由屬性(property)&amp;amp;值(value)所組成，具有易於閱讀的和處理的優勢，於是後來就設計出鼎鼎大名的JSON格式 (JavaScript Object Notation)。&lt;/p&gt;
&lt;p&gt;網路應用的資料傳輸通常使用JSON格式，例如: server端傳送網頁資源到client端，client端瀏覽器再根據接收到的渲染網頁。了解JSON格式並熟悉&amp;quot;解析&amp;amp;字串化&amp;quot;能使之後學習使用 Fetch API 時更加容易。&lt;/p&gt;
&lt;h3 id=&#34;javascript-進階&#34;&gt;JavaScript 進階&lt;/h3&gt;
&lt;p&gt;跟隨w3school官網的JS教學看看，並把Youtube上的進階教學影片看過一遍，這些主題是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nested Funtion&lt;/li&gt;
&lt;li&gt;Closure&lt;/li&gt;
&lt;li&gt;this keyword&lt;/li&gt;
&lt;li&gt;Class&lt;/li&gt;
&lt;li&gt;Asynchronous JavaScript
&lt;ul&gt;
&lt;li&gt;Timeouts and Interval&lt;/li&gt;
&lt;li&gt;Callbacks&lt;/li&gt;
&lt;li&gt;Promise&lt;/li&gt;
&lt;li&gt;async &amp;amp; await&lt;/li&gt;
&lt;li&gt;Event Loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Function 的進階應用對我來說是很新的觀念，像是&lt;strong&gt;nested function &amp;amp; Closure&lt;/strong&gt;都是之前寫過的程式語言中沒有接觸過的概念。 &amp;ldquo;使用Closure達到funtion中的private variable 這件事&amp;quot;對於本身是從較為嚴謹的C++作為入門程式語言的我來說感到不可思議，因為這牽扯到var關鍵字所建立的變數是function scope，與其他語言的block scope不同。&lt;/p&gt;
&lt;p&gt;另一個奇妙的點是通常function內的local 變數只會在function執行期間 &amp;ldquo;存在&amp;rdquo; ，然而 JavaScript  Closure的概念使得當nested function中 外部的function被invoked時，&lt;strong&gt;該function 的 lexical enviroment 都會被建立&amp;amp;保留&lt;/strong&gt;，而local variable就包含在此lexical enviroment中。同一個function closure所形成的不同變數(常數)就具有不同的lexical enviroment，根據這個特性就可以達到類似OOP的概念。&lt;/p&gt;
&lt;p&gt;除了function的新概念外，還包含this 關鍵字。若是從其他OOP(物件導向)語言轉過來學習JavaScript的人肯定會被this的概念混淆。this根據invoke的時機會有&lt;strong&gt;各種不同的結果&lt;/strong&gt;，不過我也沒有仔細研究一遍，唯一能確定的是 (&lt;del&gt;很多人都很困惑&lt;/del&gt; )關於this的討論會另外寫成一篇文，在這邊就先不討論。&lt;/p&gt;
&lt;h3 id=&#34;asynchronous-javascript&#34;&gt;Asynchronous JavaScript&lt;/h3&gt;
&lt;p&gt;JavaScript另一個重要的進階主題是&lt;strong&gt;同步&amp;amp;非同步&lt;/strong&gt;程式。
程式初學者學到的程式執行順序: 一行一行，從上而下，依序執行 就是最常見的synchronous程式。這類程式雖然直觀，但是當某一行指令或某一個function執行的時間較長時，就會使得程式阻塞(blocking)。但在Event 很多的網頁應用中，我們當然不希望網頁當掉或是某一個Button 按下去沒反應，因此就有了&lt;strong&gt;Asynchronous 非同步&lt;/strong&gt;的概念。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;註: JavaScript 本身是synchronous、Blocked、single-thread language。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;timeouts--intervals&#34;&gt;Timeouts &amp;amp; Intervals&lt;/h4&gt;
&lt;p&gt;藉由&lt;strong&gt;Web API&lt;/strong&gt; 提供的Timeout method我們可以實現類似asynchronous的效果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world\n&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;setTimeout( )&lt;/code&gt; 可以讓function在經過特定時間後才執行，而且在等待的時間內不會阻擋到後面程式碼的執行。&lt;code&gt;setInterval( )&lt;/code&gt; 也是類似的觀念，不過會持續執行直到程式結束或interval被取消。&lt;/p&gt;
&lt;p&gt;這邊需要特別注意&lt;strong&gt;等待時間是minimum delay 而不是guaranteed delay&lt;/strong&gt;(這牽扯到Web API 與 JavaScript底層的運作)，所以即使寫成 &lt;code&gt;setTimeout(fun, 0)&lt;/code&gt; 也不能保證function會馬上執行。&lt;/p&gt;
&lt;h4 id=&#34;callbacks&#34;&gt;Callbacks&lt;/h4&gt;
&lt;p&gt;callback如果單看中文翻譯名稱可能比較難懂，簡單來說就是一個函式接受另一個函式當作參數傳入，這麼做的好處就是可以讓函式控制參數函式的執行時機。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;案例一&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;First&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Fn&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Fn&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;First&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//執行結果:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//1 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;這時候很多人可能會想，那為何不直接寫成這樣就好?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;First&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Fn&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;First&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//執行結果與上相同
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;雖然執行結果相同，但問題是當First Function的執行時間較長時會造成程式Block，而使用&lt;code&gt;setTimeout()&lt;/code&gt; 又會造成順序不對(&lt;code&gt;Second()&lt;/code&gt;先執行)。將函式寫成Callback的形式就可以搭配&lt;code&gt;setTimeout()&lt;/code&gt; 使用，&lt;strong&gt;進而確保程式在非同步執行的情況下，順序是對的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Callback雖然方便使用，但是當有過多的callback function會造成複雜的巢狀結構，使得程式碼變得&lt;strong&gt;不易閱讀&amp;amp;維護&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchCurrentUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/user`&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchFollowersByUserId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/followers/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchFollowerInterests&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/interests/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;interstId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;//直到取得需要的資源.....
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;，進而造成&lt;strong&gt;Callback Hell&lt;/strong&gt;。
為了避免callback hell於是後來又延伸出Promise的概念。&lt;/p&gt;
&lt;h4 id=&#34;promises&#34;&gt;Promises&lt;/h4&gt;
&lt;p&gt;promise 是一個可以有不同狀態的JavaScript Object，分別是&lt;strong&gt;pending, fulfilled, rejected&lt;/strong&gt;，我們可以依據不同的狀態來處理asynchronous code。Promise最大的用處是他提供&lt;code&gt;.then()&lt;/code&gt; 與 &lt;code&gt;.catch()&lt;/code&gt; 等method，而這兩者的回傳值皆為promise，可以方便地進行 &lt;em&gt;鍊式調用(Chaning)&lt;/em&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;promise&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fecthCurrentUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api/user&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;promise&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchFollowerSByUserId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/followers/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchFollowerInterests&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/interests/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;interstId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//持續直到取得需要的資源....
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    .&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#75715e&#34;&gt;/*rejected 處理*/&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用promise可以很好的避免callback Hell，並且方便程式開發者撰寫Error Handling。&lt;/p&gt;
&lt;p&gt;除此之外promise還提供一些實用method 如 &lt;code&gt;Promise.all( )&lt;/code&gt; , &lt;code&gt;Promise.allSettled( )&lt;/code&gt;, &lt;code&gt;Promise.race()&lt;/code&gt; 來滿足現今網頁各種複雜的request。&lt;/p&gt;
&lt;p&gt;關於Promise的內容可以寫好幾篇文章了，對於初學非同步程式的新手一次接觸這麼多的概念會需要不少時間消化，幸好當初在自學Flutter 框架的過程中就先接觸並且學習類似的觀念(在Dart 語言中叫做Future)，以至於我現在學習起還能應付得過來。關於非同步程式的學習筆記之後有空會再統整成新的文章來發表。&lt;/p&gt;
&lt;h4 id=&#34;asyncawait&#34;&gt;async/await&lt;/h4&gt;
&lt;p&gt;有了Promise的概念後，接者就要提到async/await。
用async關鍵字定義的function 會成為async function，其用意是使得function的回傳值為Promise；
而await關鍵字則能讓程式等待 async functoin 的 return 結果。&lt;/p&gt;
&lt;p&gt;在這兩個關鍵字的搭配下就能&lt;strong&gt;用synchronous code的寫法來撰寫asynchronous code&lt;/strong&gt;，來看以下範例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchData&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchCurrentUser&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/user`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;followers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchFollowersByUserId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/followers/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;interests&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchFollowerInterests&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`api/interests/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;followerId&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//持續直到取得需要的資源....
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;這樣的方法使得撰寫程式可以更直觀，並且可以直接套用try&amp;hellip;catch() 來做例外處理。&lt;/p&gt;
&lt;h3 id=&#34;其他學習&#34;&gt;其他學習&lt;/h3&gt;
&lt;p&gt;再有了上述提到各種基本概念後再去觀看Fetch API 的教學影片比較容易上手，因為涉及 JSON、Object、asynchronous等主題。不過我目前對於Fetch API 的了解僅止於 HTTP request ，詳細的應用還有待進一步學習。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;h3 id=&#34;撰寫文字&#34;&gt;撰寫文字&lt;/h3&gt;
&lt;p&gt;我發現若在學習的過程中沒有主動做筆記，再撰寫文章的當下要寫出學習的總結整理還滿困難的。&lt;/p&gt;
&lt;p&gt;再撰寫的過程還要重新打開已經看過的文章or影片複習，這與我理想中的寫作有點出入。以往的想法都是學習完成後便可以順利的寫下總結文章，然而事實卻是: &lt;strong&gt;邊review，邊想總結，邊寫下文字&lt;/strong&gt;，這樣做花費了大量的時間。&lt;/p&gt;
&lt;p&gt;在&lt;em&gt;&lt;strong&gt;卡片盒筆記&lt;/strong&gt;&lt;/em&gt; 這本書中有提到，理想的寫作過程應該為學習的當下就在做統整筆記並與其他的知識做一個連結。而產出文章的方法為整理總結好的文字組合成段落&amp;amp;文章，換句話說，最後的步驟反而是最簡單的。若依據傳統的寫作方法從空白的紙張開始寫，會花上不少時間。&lt;del&gt;這篇文章的內容大概花了我超過五小時&lt;/del&gt;&lt;br&gt;
不過我也還在嘗試新的產出方法，期望自己在學習之於也能產出高品質的文章給他人看。&lt;/p&gt;
&lt;h3 id=&#34;持續學習&#34;&gt;持續學習&lt;/h3&gt;
&lt;p&gt;這篇紀錄的概念只佔前端工程的冰山一角，當真正投入心力學習就會發現涉及到的技術很廣，並且水很深。唯有持續不斷的學習才能在快速變化的前端工程領域不被淘汰。目前打算將更詳細的技術筆記單獨拉出來成為新的系列文章，這系列就專注在自己每周前端學習總結這樣。&lt;/p&gt;
&lt;p&gt;那第二周的學習內容總結就到這邊，擱置的第三周文章我會盡快補齊(大概?)。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>面試趣-AppWorks School校園培訓計畫</title>
        <link>https://victorchao996.github.io/p/interviewrecord_appworks_school_campus_program/</link>
        <pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/p/interviewrecord_appworks_school_campus_program/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/interviewrecord_appworks_school_campus_program/appworksSchoolCampusProgram.jpg" alt="Featured image of post 面試趣-AppWorks School校園培訓計畫" /&gt;&lt;h2 id=&#34;前言介紹&#34;&gt;前言介紹&lt;/h2&gt;
&lt;p&gt;偶然在網路上看到AppWorks School最近開放報名&lt;strong&gt;第三屆的校園培訓計畫&lt;/strong&gt;，再加上平常在聽的Podcast節目&amp;quot;程人頻道&amp;quot; 的最新一集就是校長Shirney分享AppWorks School的理念&amp;amp;培訓營的介紹後，就萌生了也許我可以參加的想法。於是在看過校園計劃的課程說明&amp;amp;網路上的公開心得分享後就直接手刀報名。&lt;/p&gt;
&lt;h2 id=&#34;深入了解schools&#34;&gt;深入了解Schools&lt;/h2&gt;
&lt;p&gt;在詳細研究AppWorks School前只知道他是一個培育機構，專門針對想要轉職成為軟體工程師的朋友提供培訓的課程，至於實際如何運作並不清楚。&lt;/p&gt;
&lt;p&gt;後來從官方Youtube說明會上說明會影片中了解到AppWorks School是整個AppWorks Ecosystem中的一環，而最早AppWorks是先有AppWorks 加速器，之後更近一步有了AppWorks Fund (基金)。有了新創團隊，有了資金，接下來就剩下的就是人才的部分，於是在2016年就創立了AppWorks School。&lt;/p&gt;
&lt;p&gt;在了解整個生態系的運作後對於School &amp;ldquo;想要為台灣培育出優秀的軟體工程師&amp;rdquo; 的理念更加的認同，也解開了我心中為何在School 這邊培訓可以完全免費的疑惑。&lt;/p&gt;
&lt;p&gt;剛好今年開了給資訊本科系學生的Campus Program，我想了想機會難得，於是就填了報名表單，最終也順利收到面談邀約。&lt;/p&gt;
&lt;h2 id=&#34;準備階段&#34;&gt;準備階段&lt;/h2&gt;
&lt;p&gt;準備的過程不外乎的就是先把網路所有公開心得文章都看過一遍，雖然與Schools Program有關的只有3篇，但是轉職班的心得文我也是略看略看。&lt;/p&gt;
&lt;p&gt;值得一提的是，文章不僅沒有誇，張的吹噓，反而是很真實的呈現在School學習的階段遇到的各種事情。例如說很多學員在參與的過程中充滿挫折，畢竟一周中要投入巨量的時間，而且每天都接觸自己不熟悉的事物，心態很容易崩。對於要在短短幾個月內就轉職成為軟體工程師肯定沒有這麼簡單，這也是幾乎每一篇心得文都說培訓過程很痛苦。&lt;strong&gt;然而培訓的過程中學員都會互相幫助或加油打氣，在朝夕相處下逐漸與其他人培養共患難的精神&lt;/strong&gt;，這也難怪大家都很推進入School 磨練自己。&lt;/p&gt;
&lt;p&gt;除了文章，我把AppWorks School 官方的IG、Youtube都大致看過一遍。除了線上校園說明會的影片外，我也看了一些轉職軟體工程師的分享影片給看完，&lt;strong&gt;我發現自己愈了解AppWorks School ，愈想要進到AppWorks School中做學習。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在面試前針對可能會被問到的問題一一做了合適的回答整理，除此之外也從家人那獲得寶貴的建議，例如履歷要如何修改，面試準備方向等。為了這次的面談的準備我可是使出渾身解數，把我能做的準備都做了。&lt;/p&gt;
&lt;h2 id=&#34;面試過程&#34;&gt;面試過程&lt;/h2&gt;
&lt;p&gt;面談當天我起的一大早，從學校(中壢)座車到台北花了不少時間，不過幸好我約的時間是11:30，在經過各總轉車後於10點左右到School 附近。&lt;/p&gt;
&lt;p&gt;11:15抵達八樓Appworks School開放區域，並根據指定地點到會議室裏面等待。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://victorchao996.github.io/p/interviewrecord_appworks_school_campus_program/appworksSchoolCampusProgram.jpg&#34;
	width=&#34;3024&#34;
	height=&#34;2275&#34;
	srcset=&#34;https://victorchao996.github.io/p/interviewrecord_appworks_school_campus_program/appworksSchoolCampusProgram_hu35c21594f2f672a2f44efe01c9d1bc34_1037235_480x0_resize_q75_box.jpg 480w, https://victorchao996.github.io/p/interviewrecord_appworks_school_campus_program/appworksSchoolCampusProgram_hu35c21594f2f672a2f44efe01c9d1bc34_1037235_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AppWorks School 八樓大廳&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;還記得左邊是面試等待的會議廳，而右邊的辦公室剛好在拍攝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在等待的過程中聽到會議室中的小門傳出對談的聲音。從上一位面試者離開，一直到11:30 接引我進去的Luna 出來之前緊張到不行，若2022年有最佳緊張時刻排名，那在等待的那10分鐘肯定得獎。&lt;/p&gt;
&lt;p&gt;進入小間的會議室，裡面只有兩位: 一位是School Program的Manager Carolyn，另一位是寄出面談邀約信的 Luna。我原本以為會有校長或是前後端的任一位導師也在旁邊陪聽，不過看來果真是跟網路描述上的一樣，面談主要是想看看&lt;strong&gt;各位應徵的學員的動機，而不是過往的經歷。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;面試問題&#34;&gt;面試問題&lt;/h3&gt;
&lt;p&gt;面試的問題我有印象的主要有幾個:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;請你自我介紹一下&lt;/li&gt;
&lt;li&gt;對於未來的打算?
&lt;ol&gt;
&lt;li&gt;你有提到實習，所以你下學期打算一邊實習一邊跑Schools 這邊?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;你今天從哪裡來?&lt;/li&gt;
&lt;li&gt;你是哪裡人?&lt;/li&gt;
&lt;li&gt;人生至今為止面對的低潮?
&lt;ol&gt;
&lt;li&gt;你現在還在低潮中嗎?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;為什麼想要參加Program? (類似)&lt;/li&gt;
&lt;li&gt;預計投入的時間?&lt;/li&gt;
&lt;li&gt;如果你沒有最終沒有成功錄取，你會做那些準備或是事情來面對之後的工作 ?&lt;/li&gt;
&lt;li&gt;有沒有想要問我們的問題 ?&lt;/li&gt;
&lt;li&gt;等等面談結束後有什麼打算嗎?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;過程中&#34;&gt;過程中&lt;/h3&gt;
&lt;p&gt;講的中規中矩，印象中講到一半手還會抖，真的頗緊張。不過跟我面談的兩位很盡力的表現出只是想要跟我聊聊，而不是要扮黑臉刷掉我，這也讓我比較沒有這麼緊張。&lt;/p&gt;
&lt;p&gt;在回答問題的過程中我盡力展現自己的真誠，把我所能回答的想法都告訴兩位。&lt;strong&gt;我認為比較可惜的是，我準備好回答的問題並沒有出現，而我也忘記在回答原本的問題之餘可以把話題導向我想要表達的事項上&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;面談的後段兩位突然問我擅長的程式語言，在我回答完後就給我一張紙上面有C++程式碼要我說明該function的功能。當下完全沒預料到會有程式題，不過也是順利的完成這一part。&lt;/p&gt;
&lt;p&gt;面談的過程除了緊張外還算順利，三十分鐘很快就過去了。對於邊緣人來說，我講話沒有結巴已經很不錯了，但面談完的當下能感受到自己引導話題的部分仍然有很大的進步空間。&lt;/p&gt;
&lt;h2 id=&#34;自我檢討&#34;&gt;自我檢討&lt;/h2&gt;
&lt;p&gt;為了避免這整篇文流於流水帳(好啦 其實已經是了)，關於面試得過程就不再細談，接下要做一點自我檢討。&lt;/p&gt;
&lt;h3 id=&#34;行為檢討&#34;&gt;行為檢討&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一開始太緊張導致語速稍快，面談的兩位可能聽不清楚&lt;/li&gt;
&lt;li&gt;在思考回答的時候眼神會不自覺的往上飄，不太確定這樣會不會被認為是在說謊&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;回答檢討&#34;&gt;回答檢討&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;回答的時候沒有提及參與多人專案的過程&lt;/li&gt;
&lt;li&gt;沒有展現自己很好的利用學校的資源: &lt;strong&gt;English Cafe、企業博覽會、職涯中心講座、去企業參訪&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;對於前端的學習過程解釋不是很清楚&lt;/li&gt;
&lt;li&gt;如何學習新知識的過程解釋的不清楚&lt;/li&gt;
&lt;li&gt;在看程式題的過程中太安靜
&lt;ol&gt;
&lt;li&gt;應該要問除了回答function的功能外，還需不需要做其他改進&lt;/li&gt;
&lt;li&gt;解釋function的過程很爛&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在最後問問題環節只問了一個問題
&lt;ol&gt;
&lt;li&gt;應該要把握機會問，例如對於School 來說學員應該要具備什麼樣的特質是比較好的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;面完的當下就很想要重來一次，不過時間無法倒流，期許自己好好把握每一次學習的機會。做為人生第一次正式的面試，雖然過程只有短短半小時，而且也不是工作相關的，不過我認為這是非常難得的學習機會，我也很慶幸自己踏出這一步。&lt;/p&gt;
&lt;p&gt;非常感謝Appsowrk School給我這面談的機會，在準備面談的過程中我明確了解自己有非常多的不足，值得我投入時間去改善學習。另外在這兩三周忙碌的準備中也將我從低潮中抽離出來，使我能不再把注意力放在那些會讓我焦慮的想法上。&lt;/p&gt;
&lt;p&gt;第一次的面試心得就分享到這，下一站會去哪呢? 面試趣，我們下一篇再見。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>面試趣-系列文開篇介紹</title>
        <link>https://victorchao996.github.io/p/interviewrecord_first_experience/</link>
        <pubDate>Fri, 09 Dec 2022 18:36:00 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/interviewrecord_first_experience/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/interviewrecord_first_experience/interview.jpg" alt="Featured image of post 面試趣-系列文開篇介紹" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;一想到目前自己已經大四，再過一段時間就要正式告別校園，在真正的進入一家公司工作之前肯定會經過不少次面試。有鑑於此，我想把每次面試的過程中遇到的有趣的事情記錄下來，除了當作一般的紀錄外也可以順便檢討自己是否有其他地方可以改進，於是就了開設的這個系列文的想法。&lt;/p&gt;
&lt;h2 id=&#34;新手村小試身手&#34;&gt;新手村小試身手?&lt;/h2&gt;
&lt;p&gt;目前21歲，之前的&lt;strong&gt;類面試&lt;/strong&gt;經驗有三個: 分別是升國中時的資優班、大一系上反服面試、大學的新生知訊網團隊，讓我娓娓道來。&lt;/p&gt;
&lt;h3 id=&#34;資優班面試&#34;&gt;資優班面試&lt;/h3&gt;
&lt;p&gt;人生第一次與陌生人面談就被洗臉的經驗: 資優班面試。詳細過程忘了，只記得被叫進一個辦公室，裡面有一位老師問我問題。現在唯一記得的是，那位老師問我平常有沒有在看書，我的回答是: 「我平常都看一些科學相關的書籍&amp;hellip;&amp;hellip;..」，後來我又說了「非洲人會吐口水在其他人的臉上&amp;hellip;..」。對於那時只會看科學漫畫雜誌的也不清楚為什麼當下會把這完全跟科學沒有相關的內容說出來，結果那位老師直接回了一句讓我當場啞口無言: 「那非洲人吐口水在其他人臉上有什麼科學原理?」。&lt;strong&gt;那時年紀小，根本不懂甚麼是&amp;quot;被洗臉&amp;quot;，我只覺得糟透了，我竟然回答不出來。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最終結果: 沒有錄取，不過這也不是特別意外，沒有特別準備過就去面試真的很慘。&lt;/p&gt;
&lt;h3 id=&#34;反服面試&#34;&gt;反服面試&lt;/h3&gt;
&lt;p&gt;第二次類面試在大一的系上活動，這個活動全名&amp;quot;返鄉服務&amp;quot;，實際上去國小舉辦營隊給國小生玩。&lt;/p&gt;
&lt;p&gt;面試的過程很奇葩， 學長姐們把教室裝飾的很誇張，把大燈關掉，換成舞台燈，舞台燈除了照在團面的四張個人椅子上，另外兩側大燈也照在面試官所在的位置。&lt;/p&gt;
&lt;p&gt;面試官的排場特別浮誇，不知道哪來的巨型長桌布置成高低三層，而面試的學長姊有10幾位，人手一台筆電，在舞台黃燈的照射下看起來特別嚴肅。&lt;/p&gt;
&lt;p&gt;對於當時的我哪見過這樣的場面，進入教室的當下就嚇到，於是表現也不太正常。再加上原本應該是四人一組的團體面試，因為湊不到人的關係變成2人，那位同學又不善與人交流，導致學長姊要求我們現場即興演出的時候有夠尷尬&amp;hellip;&amp;hellip; 當下非常想要找個洞鑽進去。&lt;/p&gt;
&lt;p&gt;當然這種會涉及他人的事情本來就比較看運氣，但我自己也有做不好的地方值得檢討。像是當面試官提問說我是否有其他活動時，我很如實的回答有參加系排，且應該會以系排為主。這個回答顯然不是學長姐他們希望聽到的。&lt;/p&gt;
&lt;p&gt;在這過程中我學到一件事: &lt;strong&gt;誠實固然是好事，但是有些事情可以不用講出來也沒關係。&lt;/strong&gt; 在與他人面談的過程中應該要盡量放大自己的優勢，並且避免談及自己的劣勢，而我上述的回答完全沒有做到這一點，是比較可惜的。&lt;/p&gt;
&lt;p&gt;最終結果: 沒有錄取。&lt;/p&gt;
&lt;h3 id=&#34;新生知訊網&#34;&gt;新生知訊網&lt;/h3&gt;
&lt;p&gt;第三次類面試是面學校的知訊網團隊，這個團隊的目標是每年為新生打造一個給新生用的入學網站，除了程設組外也會有攝影影音組等，當然我選擇面試的組別是程設組。&lt;/p&gt;
&lt;p&gt;這次的面試比較沒有資訊可以做為檢討的內容，我只記得面談前會填一張類似自我介紹的紙張，上面有問說熟悉的程式語言、做過的專案這樣。當時的我仍然是菜雞一枚，顯然是不會有什麼能拿出來說嘴的專案。&lt;/p&gt;
&lt;p&gt;最終結果: 沒有錄取&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;以上三個就是我曾經經歷過的類面談，趁我還沒遺忘前趕快記錄下來。我想，每次的經歷的都是一次學習，儘管這三次的結果都沒錄取，但是我仍然學到不少。&lt;/p&gt;
&lt;p&gt;之後這個系列篇章都會是正式面試的內容，在這邊也預告下一篇會是我去AppWorks School 面試Campus Program # Batch 3 的經歷，敬請期待 !&lt;/p&gt;
</description>
        </item>
        <item>
        <title>第一周-前端學習首月&amp;意外插曲</title>
        <link>https://victorchao996.github.io/p/frontend_learning-first-week/</link>
        <pubDate>Sun, 04 Dec 2022 18:00:00 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/frontend_learning-first-week/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/frontend_learning-first-week/appworks_school.png" alt="Featured image of post 第一周-前端學習首月&amp;意外插曲" /&gt;&lt;p&gt;封面圖片來源: &lt;a class=&#34;link&#34; href=&#34;https://appworks.tw/appworks-school-ios-class-1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://appworks.tw/appworks-school-ios-class-1/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在大四上最重要的活動- 研究所推甄落榜 後，就正式宣告我與本校的資工所無緣。而研究所考試入學的管道則是相對競爭(以去年為例: 中央大學資工所收30多人，而報考人數為1300多)，暑假的備考過程大概就是: 每日學習無法應用的死知識，學了又忘，忘了再學。反反覆覆下，&lt;strong&gt;我更加確信這條路，我既不擅長也不想走，於是我在開學就放棄準備明年2月的考試&lt;/strong&gt;。關於面對未來出路的焦慮有太多可以談了，以後會找時間單獨寫一篇文。&lt;/p&gt;
&lt;p&gt;因為不想要畢業就失業，於是狠下心來認真學習前端技術，也因此可以開啟前端學習之路的挑戰。&lt;/p&gt;
&lt;h2 id=&#34;新的接觸&#34;&gt;新的接觸&lt;/h2&gt;
&lt;p&gt;在一個多月前我心血來潮想說透過Youtube上的影片自學，想著至少先理解前端技術是怎麼回事，因為我當時對前端的理解僅止於HTML、CSS、JavaScript、網站開發等名詞上。於是我找了由freeCodeCamp.org這個頻道中的前端開發入門課程:
&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=zJSY8tbf_ys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Frontend Web Development Bootcamp Course (JavaScript, HTML, CSS) - YouTube&lt;/a&gt;
題外話: 很推這個組織，這是一個非營利組織，使命是讓大家免費學習coding。官方Youtube頻道上有各種程式語言、電腦科學相關的優質影片都是免費開放讓大家來觀看。&lt;/p&gt;
&lt;p&gt;在這個影片中我學習到幾個重點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML是網架的骨架，CSS是網頁的裝飾，而JavaScript則是網頁的功能&lt;/li&gt;
&lt;li&gt;HTML 的各個基礎tag&lt;/li&gt;
&lt;li&gt;CSS 的selector 優先度、常用property、Box Model概念&lt;/li&gt;
&lt;li&gt;JavaScript 基礎&amp;amp; DOM(Document Object Model)&lt;/li&gt;
&lt;li&gt;RWD(responsive web design)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在影片的後段也跟著老師練習&lt;a class=&#34;link&#34; href=&#34;https://www.frontendmentor.io/home&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Frontend Mentor | Front-end coding challenges using a real-life workflow&lt;/a&gt;  上的入門Challenge。在練習得過程中我終於理解為何前端工程師是轉職者的首選，除了網路上學習資源多外，最重要的是很&lt;strong&gt;容易獲得成就感&lt;/strong&gt;，畢竟手刻出一個畫面比寫出一個演算法題目還來的有成就感對吧?&lt;/p&gt;
&lt;h2 id=&#34;進一步了解&#34;&gt;進一步了解&lt;/h2&gt;
&lt;p&gt;上述入門影片算是一窺前端的基礎技術，但我清楚明白就算把這個&lt;strong&gt;網頁三本柱HTML、CSS、JavaScript&lt;/strong&gt;學到精熟也一定有完成不了的事情。有趣的一點是: 這個blog網站就是在我連三本柱都不認識的情況下使用Hugo (Static Site Generators)建立起來的。&lt;/p&gt;
&lt;p&gt;於是我像往常一樣上網搜尋: 「Front-end  developer roadmap」，最終我找到這個OpenSource: &lt;a class=&#34;link&#34; href=&#34;https://roadmap.sh/frontend&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Frontend Developer Roadmap: Learn to become a modern frontend developer&lt;/a&gt;  。
沒看還好，一看就發現一堆未曾聽聞過的技術名詞，尤其是各種相關&lt;strong&gt;框架&lt;/strong&gt;看得令人眼花撩亂。
例如這張表上各種因為實務開發上需要而產生的技術:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS Library/ Framework: React、Angular、Vue.js&lt;/li&gt;
&lt;li&gt;CSS Framework: Bootstrap、Tailwind&lt;/li&gt;
&lt;li&gt;Testing tool: Jest&lt;/li&gt;
&lt;li&gt;Build tools: Lisnters and Formatters、Task Runners、Module Bundlers&lt;/li&gt;
&lt;li&gt;Version Control Systems &amp;amp; Repo hosting Services: Git、GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我強力推薦所有要學習技術的夥伴，在朝任一技術方向深入之前都應該要看過由專業人員所建立的&lt;strong&gt;學習路線(learning roadmap)&lt;/strong&gt;。因為學習路線除了做為學習引導外，也可以建立&amp;quot;大局觀&amp;quot;，避免把時間投入在 &lt;strong&gt;「自以為很重要的事情上」&lt;/strong&gt;。若沒有上網查找這個roadmap，我可能到現在還在為自己建立的單頁內容(甚至不能稱得上是網站)沾沾自喜呢，很慶幸我並沒有這樣做。&lt;/p&gt;
&lt;h2 id=&#34;意外插曲&#34;&gt;意外插曲&lt;/h2&gt;
&lt;p&gt;本周偶然間得知AppWorks School 開放大三屆校園培訓計畫(也許是臉書廣告?)、系上的粉絲專頁也分享這個培訓計畫，再加上平常關注的podcast 頻道 &amp;ldquo;程人頻道&amp;rdquo; 的最新一集也邀請&lt;strong&gt;校長Shirney分享AppWorks School的理念&lt;/strong&gt;，總總的跡象都像是再提醒我不能錯過這麼好的機會。&lt;/p&gt;
&lt;p&gt;以前就有關注到AppWorks，不過印象中都是針對有&lt;strong&gt;轉職需求&lt;/strong&gt;的學員來做培訓。沒想到今年有針對本科系學生的培訓。在聽完Podcast節目，並做了十足的資料收集後，我發現這就是我想要的，學校給不了的 &lt;strong&gt;&amp;ldquo;團隊實務開發經驗&amp;rdquo;&lt;/strong&gt; ，於是我直接手刀報名。&lt;/p&gt;
&lt;p&gt;在送出報名表單的隔天就收到面談的邀約，下周星期五將會成為我&lt;strong&gt;人生中第一場正式面試&lt;/strong&gt;，特別緊張😟。這麼豐沛的資源再加上金額免費，報名參加的人肯定很多，但我也明白，&lt;strong&gt;擺在眼前的機會若不盡力去爭取，未來的我肯定會後悔&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本周的課外時間最主要就是把課程大綱上的相關技術都看過一遍，在這邊特別推薦一個Youtube頻道&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/@Fireship&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Fireship - YouTube&lt;/a&gt;  ，頻道中的100 seconds系列可以帶新手快速認識一項技術or程式語言的歷史&amp;amp;應用。 另外也推薦這個影片 &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=Sxxw3qtb3_g&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to OVER Engineer a Website // What is a Tech Stack? - YouTube&lt;/a&gt;  在這影片中介紹建立一個網站需要選擇Tech Stack，提供了前後端技術選擇的思路，對於學習者來說可以理解為何建立網站會涉及到這麼多的技術。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;瘋狂的一周! 從&lt;strong&gt;相關資料的收集、準備報名資料、理解課程大綱的技術，與家人的討論&lt;/strong&gt;等。在這事情都是一個月前還身陷在情緒低谷中的我無法想像的，但在研究、準備的過程中我確實感覺自己比較沒有這麼憂慮了，也感覺到自己的身心有在成長。很感謝AppWorks School的活動讓我知道，自己還有很多不足之處，學習都來不及了，可沒有時間繼續悲傷下去😂。&lt;/p&gt;
&lt;p&gt;無論最終結果如何，我都心懷感激之情，謝謝這兩周努力準備的我，我學到很多。&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>前端學習之路-旅程開始</title>
        <link>https://victorchao996.github.io/p/frontend_learning-journey-begin/</link>
        <pubDate>Sun, 27 Nov 2022 18:36:00 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/frontend_learning-journey-begin/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/frontend_learning-journey-begin/path.jpg" alt="Featured image of post 前端學習之路-旅程開始" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;這一篇文是前端學習之路的開篇，最近這段時間被升學的事情搞得焦頭爛額，目前算是告一段落。面對比以往都還要嚴重的低潮期，希望自己可以找一點事情做並且順便轉移自己的注意力。&lt;/p&gt;
&lt;h2 id=&#34;自學回顧&#34;&gt;自學回顧&lt;/h2&gt;
&lt;p&gt;回顧大學前三年課外自學的技術，無論是製作遊戲用的Unity，Android 平台app開發，甚至是跨平台框架flutter都有畫面製作的部分。我發現自己投入最多時間的項目都是介面開發，&lt;strong&gt;比起程式邏輯、數據儲存、資料庫操作，我更喜歡畫面的呈現&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在製作遊戲時我花了不少時間在UI介面的擺放、虛擬鏡頭的移動、動畫上，而在app開發上介面也是我花最多時間琢磨的。從Unity的UI系統中我學到不少觀念，如:&lt;strong&gt;Anchor、縮放、不同resolution&lt;/strong&gt;等；而在app開發上則是學到: &lt;strong&gt;設定基準的位置(start, end, top, bottom)、Margin&amp;amp;Padding、Material Design&lt;/strong&gt;等觀念。&lt;/p&gt;
&lt;p&gt;先前對於前端有著不少的誤解，再加上各種巧合(諸如系上沒有相關課程)，所以沒有實際探索過前端工程這方面的知識。但在經過這兩三周的學習後我才發現，在UI介面開發上的設定都有著異曲同工之妙，或者反過來說，這些UI設計的邏輯設定多少都有受到網頁設計上style 設定的影響。在學習CSS的過程也有種倒吃甘蔗的感覺，見過不同的使用情況對於理解CSS的各項prperty有顯著的幫助。&lt;/p&gt;
&lt;p&gt;舉例來說: CSS flexbox 中的 justify-content 或 align-items 設定就會讓我想到 flutter 框架中 widget 中的命名參數MainAxisAlignment 或 CrossAxisAlignment。而 flutter 的命名&amp;amp;設定相對來說較為直觀，因為可以立即看出設定的是主軸(main axis)還是切軸(cross axis)。&lt;/p&gt;
&lt;h2 id=&#34;新的學習之路&#34;&gt;新的學習之路&lt;/h2&gt;
&lt;p&gt;為了鞭策自己可以學好前端的相關的技術，我給自己的目標是&lt;strong&gt;每周至少發布一篇學習的總結文&lt;/strong&gt;。內容不限技術、經驗談、或實作開發紀錄。希望能在記錄之餘，還可以檢驗自己是否真的有學到新的知識，避免陷入有在持續成長的謊言中。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;這學期修的課程比較少，期許自己不要把時間浪費在一些不會讓自己增長的娛樂上，所以給自己設下這樣的挑戰，就把這挑戰當作是一個比較輕鬆的鐵人賽吧。&lt;/p&gt;
&lt;h2 id=&#34;補充202311&#34;&gt;補充(2023/1/1)&lt;/h2&gt;
&lt;p&gt;我發現對於不常撰寫文字的我來說要每周發布一篇技術文章真的偏困難，尤其是當學校還有其他課程需要忙得時候。有時可能沒辦法一直發布學習的文章，所以偶爾會中斷個一周這樣(或者是發布其他分類的文章)。儘管日期可能對不上，不過我文章的title會接續下去。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>從Deadlock(死結)的觀點來分析黃色網狀線的作用</title>
        <link>https://victorchao996.github.io/p/test/</link>
        <pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/p/test/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/test/%E9%BB%83%E8%89%B2%E7%B6%B2%E7%8B%80%E7%B7%9A.jpg" alt="Featured image of post 從Deadlock(死結)的觀點來分析黃色網狀線的作用" /&gt;&lt;h2 id=&#34;黃色網狀腺&#34;&gt;黃色網狀腺?&lt;/h2&gt;
&lt;p&gt;你是否有想過路口為什麼需要黃色網狀線? 也許你的直覺是清空路口，避免讓轉彎的車輛阻礙直行車通行，進而造成路口堵塞。那為什麼在路口設置黃色網狀線就可以有效的避免道路堵塞呢? 讓筆者從&lt;strong&gt;作業系統(operation system)學科&lt;/strong&gt;中的觀念來解釋。&lt;/p&gt;
&lt;h2 id=&#34;deadlock-問題&#34;&gt;Deadlock 問題&lt;/h2&gt;
&lt;p&gt;資訊領域學生在學習作業系統(operating system)的過程中會了解到電腦系統通常&lt;strong&gt;只有有限數量的資源&lt;/strong&gt;，這些資源包括CPU 週期、memory 空間、I/O裝置等。
對於數量較多的處理程序(processes)(要執行的程式)需要遵循以下三種順序來使用各種資源，而這三種動作分別是: &lt;strong&gt;申請(request)、使用(use)、釋放(release)。&lt;/strong&gt;
給大家給舉個例子，若一個process在執行的過程中需要使用到印表機，此時&amp;quot;印表機&amp;quot;這個&lt;strong&gt;資源&lt;/strong&gt;被process給佔用，同一時間其他Process無法使用印表機，不然印表機的輸出結果會錯亂。
而探討process與process間執行這三項動作時造成&lt;strong&gt;資源等待&amp;amp;無法有效利用&lt;/strong&gt;的問題就叫做&lt;strong&gt;Deadlock(死結)問題&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;造成deadlock的四個必要條件&#34;&gt;造成Deadlock的四個必要條件&lt;/h2&gt;
&lt;p&gt;在教科書上有提到Deadlock的產生需要同時具備四個條件: &lt;strong&gt;互斥(mutual Exclusion)、持有並等待(Hold &amp;amp; Wait)、非搶斷(No preemption)、循環等待(Circular Wait)&lt;/strong&gt;，以下分別是其簡短的介紹。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥(Mutual Exclusion)&lt;/strong&gt;: 至少有一個系統資源是每次只能被一個process使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持有並等待(Hold &amp;amp; Wait)&lt;/strong&gt;: 存在一個process在我持有某資源的同時，又在等待其他資源的釋放。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非搶斷(No Preemption)&lt;/strong&gt;: process在執行過程中(包括申請資源到結束執行前)不能被中斷，也就代表說process在完成前不會主動或被動釋放占用的資源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循環等待(Circular Wait)&lt;/strong&gt;: 持有並等待的對象形成一個循環迴路。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當這四個條件同時滿足時，就會產生deadlock的情形。此時大家都在互相等待其他人手上的資源，但同時自己手上又握有其他人需要的資源，造成所有process都在等待，陷入死循環。&lt;/p&gt;
&lt;p&gt;在學習的過程中意外的看到一張有意思的圖，下方的塞車圖很好的顯示deadlock的情況，並且若仔細觀察也會發現圖中包含上面提到的四個必要條件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://victorchao996.github.io/p/test/deadlock2.jpg&#34;
	width=&#34;1907&#34;
	height=&#34;1010&#34;
	srcset=&#34;https://victorchao996.github.io/p/test/deadlock2_hu3e01c59fc2348bd848c2eddc8bf7306d_146006_480x0_resize_q75_box.jpg 480w, https://victorchao996.github.io/p/test/deadlock2_hu3e01c59fc2348bd848c2eddc8bf7306d_146006_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;環狀塞車圖&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;453px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我們就上圖來討論造成死結的四個必要條件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;互斥(Mutual Exclusion): 在此圖中&lt;strong&gt;一次只能有一個車輛通過十字路口&lt;/strong&gt;，所以路口這個資源符合互斥的條件&lt;/li&gt;
&lt;li&gt;持有並等待(Hold &amp;amp; Wait): 在此圖中路口的車輛占住了路口這個資源，但&lt;strong&gt;同時又在等待下一個十字路口的暢通&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;非搶斷(No preemption): 很顯然的，被擋住的汽車無法穿過阻擋車，且佔住路口的汽車也不會憑空消失。&lt;/li&gt;
&lt;li&gt;循環等待(Circular Wait):  都在等待下一個路口淨空而產生&lt;strong&gt;循環等待&lt;/strong&gt;。
觀察上圖應該可以發現，沒有一台車可以移動，這就是deadlock發生時的狀況。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那我們要如何避免deadlock(道路阻塞)的情況發生呢? 聰明的你應該立馬就想到了，那就是&lt;strong&gt;打破造成死結的其中一個必要條件&lt;/strong&gt;即可 !&lt;/p&gt;
&lt;h2 id=&#34;打破deadlock&#34;&gt;打破Deadlock!&lt;/h2&gt;
&lt;p&gt;那我們應該要從哪一點下手呢? 剛剛有解釋塞車圖中分別對應滿足死結的四種條件，其中第三點(非搶斷)是無法解決的，除非車子可以飛起來或穿透障礙物😂；而第四點(循環等待)因為道路設計的關係，只要持有並等待的條件滿足就有可能產生循環等待的狀況，所以一樣無法排除。這樣一來，我們能改善的點就只有第一點&amp;amp;第二點了。&lt;/p&gt;
&lt;p&gt;所以目前有兩種改進方法: 打破互斥&amp;amp;打破持有並等待，現在回顧上圖可以發現這兩點出現的位置&lt;strong&gt;皆在路口處&lt;/strong&gt;，所以我們可以針對十字路口處來做改善。&lt;/p&gt;
&lt;p&gt;其中一個改善的方法就是&lt;strong&gt;拓寬十字路口&lt;/strong&gt;，使得路口可以容納更多的車子；然而這樣還是有一個問題，若十字路口上的車子數量又達到上限時，又會產生deadlock。而剩下最後一個改進方式就是&lt;strong&gt;打破持有&amp;amp;等待&lt;/strong&gt;，只要**不要讓單一車子/或一群車子佔有十字路口這個&amp;quot;資源&amp;quot;**即可，也就是限制車子不得停在十字路口上。這樣就可以有效的避免deadlock的產生，也就比較不容易造成阻塞囉 !&lt;/p&gt;
&lt;p&gt;現在你應該能明白，為什麼要在十字路口設置黃色網狀線了。除了保持路口暢通外，還可以有效避免一定範圍內的塞車情況。雖然避免deadlock並不是主要的目的，畢竟大十字路口上有紅綠燈管制，而小巷子也不會有有這麼多車同時進入。現實世界的道路往往更複雜也更難預料，不過做為道路設計與規劃的一部分還是很值得探討的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;圖片素材來源&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封面圖片: &lt;a class=&#34;link&#34; href=&#34;https://m.facebook.com/chengxiungmath/photos/a.104541441121276/418554636386620/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://m.facebook.com/chengxiungmath/photos/a.104541441121276/418554636386620/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;塞車圖片: &lt;a class=&#34;link&#34; href=&#34;https://denninginstitute.com/itcore/processes/Dead.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://denninginstitute.com/itcore/processes/Dead.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>關於大三專題我學到的十件事</title>
        <link>https://victorchao996.github.io/p/independent-study-project-10things/</link>
        <pubDate>Sun, 03 Jul 2022 16:17:03 +0800</pubDate>
        
        <guid>https://victorchao996.github.io/p/independent-study-project-10things/</guid>
        <description>&lt;img src="https://victorchao996.github.io/p/independent-study-project-10things/lesson.jpg" alt="Featured image of post 關於大三專題我學到的十件事" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;大三下課程結束，也就意味著專題也告一段落，趁著還沒忘記這段寶貴的經驗之前，趕緊來回顧並總結自己這兩個學期學到的幾件事情。因為可以記錄的事情真的很多，所以這篇會比較著重在自己歸納出這兩個學期學習到的&lt;strong&gt;經驗&lt;/strong&gt;，我會盡量不要提及太多技術相關的名詞，讓焦點專注在經驗上，希望這篇文章對未來閱讀的讀者(包括我自己)有實質的幫助。&lt;/p&gt;
&lt;p&gt;至於整個專題使用到的技術以及遇到的困難，我會另外寫在其他篇文章上。&lt;/p&gt;
&lt;h2 id=&#34;學到的寶貴經驗&#34;&gt;學到的寶貴經驗&lt;/h2&gt;
&lt;p&gt;下面就列舉&lt;strong&gt;十個&lt;/strong&gt;我學習到的寶貴經驗，雖然我自認為混了兩個學期，不過仔細回想還是有學到不少內容。我打算把它寫下來，好說服自己多少還是有學到點東西。&lt;/p&gt;
&lt;h3 id=&#34;做好充足的準備再下決定&#34;&gt;🪄做好充足的準備再下決定&lt;/h3&gt;
&lt;p&gt;當初大二下在找專題指導教授的時候沒有好好的評估與思考就直接決定要加入現在的實驗室，現在往回看總覺得沒有好好地評估過在下決定有點可惜。當時沒有認真思考實驗室方向與未來生涯的發展性，如果我可以回到過去，我一定會仔細的評估以下三點: &lt;strong&gt;教授的專長&amp;amp;實驗室的技術方向、教授的指導態度、專題生的參與度&lt;/strong&gt;，而興趣應該要放在這三點之後。&lt;/p&gt;
&lt;p&gt;以當時的眼界與知識廣度絕對無法讓我決定出當前最好的選擇，不過就我所知有參加專題說明會的教授中，這個教授以及他的實驗室所做的方向最接近我有興趣的開發，也就是&lt;strong&gt;遊戲開發&lt;/strong&gt;。於是我就選擇加入了。&lt;/p&gt;
&lt;p&gt;至於實驗室實際情況如何(笑)，我會另開一篇文章來寫，能談的東西實在太多了。&lt;/p&gt;
&lt;h3 id=&#34;好的溝通幫你省時間&#34;&gt;🪄好的溝通幫你省時間&lt;/h3&gt;
&lt;p&gt;好的溝通真的很重要!這個觀念是我上半學期最大的感想。當初參與計畫端的會議時有一起討論，不過計畫端的要求一直不是很明確，有新增修改。除此之外，也許是計畫端那邊的教授很忙同時有很多個案子在跑，所以比較沒有特別關注我這邊開發的東西。最後的結果就是，跟計畫端那邊demo好幾周之後才發現&lt;strong&gt;方向根本做錯&lt;/strong&gt;，浪費了好幾周。&lt;/p&gt;
&lt;p&gt;其實上述問題的發生與計畫端也有一點關係，不過後來仔細想想如果自己夠積極主動是可以避免的，只能說自己還有很大的改進空間。詳細發生的問題會寫在另外一篇上。&lt;/p&gt;
&lt;h3 id=&#34;提前計畫不會吃虧&#34;&gt;🪄提前計畫不會吃虧&lt;/h3&gt;
&lt;p&gt;大三上與大三下的所修的課程偏多，兩學期的課程都有到&lt;strong&gt;21學分(含專題)&lt;/strong&gt;，相較於每學期的最低標準16學分來說應該算滿多的。剛開學的時候還算輕鬆，當期中考周或是期末考周來臨的時候，就會感到時間嚴重不夠用，各種報告&amp;amp;考試都集中在這一兩周內，壓力有夠大。&lt;/p&gt;
&lt;p&gt;所以提前規劃好各種事情比較不會手忙腳亂。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://victorchao996.github.io/p/independent-study-project-10things/Test_and_Homework.jpg&#34;
	width=&#34;1050&#34;
	height=&#34;242&#34;
	srcset=&#34;https://victorchao996.github.io/p/independent-study-project-10things/Test_and_Homework_hu66b04167eb7bc5feb0da95d25dd9c2d2_96130_480x0_resize_q75_box.jpg 480w, https://victorchao996.github.io/p/independent-study-project-10things/Test_and_Homework_hu66b04167eb7bc5feb0da95d25dd9c2d2_96130_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;圖片: 大三上期末-考試&amp;報告轟炸&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;433&#34;
		data-flex-basis=&#34;1041px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;有些事情不是你的錯但卻是你的責任&#34;&gt;🪄有些事情不是你的錯，但卻是你的責任&lt;/h3&gt;
&lt;p&gt;剛加入實驗室的時候，原本要做的項目有學長的專案可以參考，但後來發現學長開發的專案所使用的&lt;strong&gt;設備已經停產&lt;/strong&gt;了。而且更慘的是，深入研究學長的專題後發現，專案中的程式碼是來自設備商發佈在平台上的開發套件(姑且稱他為prefab吧)，總而言之就是一個可以直接拿來用的套件，前提是要使用他們家的產品。&lt;/p&gt;
&lt;p&gt;當時我遇到的第一個大問題就是，我要拿著&lt;strong&gt;新的設備來達到相近的功能，但我沒有可以參考的script&lt;/strong&gt;。而我遇到的第二個問題是，&lt;strong&gt;實驗室沒有人做過類似的，連碩班學長都沒有&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有一段時間真的有點崩潰，我想要達到的功能網路上相關的資料很少，應該說幾乎沒有。為什麼相關資料很少呢? 這就跟我想要達到的功能有關了。老師的要求是希望能用設備來控制遊玩，就像是學長專題做的東西。然而，實驗室所購買的這個設備是一個&lt;strong&gt;完整的產品&lt;/strong&gt;，開發商販賣這個設備的目的是希望買家可以購買他們製作的遊戲，換句話說，是為了讓玩家體驗這款遊戲而販賣這個設備。&lt;strong&gt;這個設備被販賣目的從一開始就不是為了開發&lt;/strong&gt;，自然而然在官網上就不會出現針對這個設備的開發文件、開發套件、或API可以讓我來研究使用。&lt;/p&gt;
&lt;p&gt;這也間接導致我大三上學期整個進度大當機，只能先去做比較次要的開發，好讓每周的meeting內容看起來不會這麼水。不過最後還是躲不掉老師的提問，有好幾周都只能尷尬的回說，「這部分我還在努力研究中&amp;hellip;」。&lt;/p&gt;
&lt;p&gt;抱怨歸抱怨，不過這也是當時我自己需要克服的問題；我想說的是，&lt;strong&gt;有些事情不是你的錯，但卻是你的責任。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;別跟自己過不去&#34;&gt;🪄別跟自己過不去&lt;/h3&gt;
&lt;p&gt;除了上面提到問題，還有不少讓我灰心的各種事情，包括開發的項目與我當初加入實驗室前的期望不同、製作的遊戲很無聊、教授的態度等等。&lt;/p&gt;
&lt;p&gt;導致我大三上有好一段時間心情很沮喪(尤其是期中周前後&amp;amp;期末事情一多的時候)，算是進入一個&lt;strong&gt;低潮期&lt;/strong&gt;吧。那段時間常常出現自我懷疑，尤其在與同學聊天的過程中了解到同學們在專題上的所學與進度之後，我就會問自己:「你現在在幹嘛? 這真的是你希望的嗎? 你對現在的生活滿意嗎?」，而答案顯而易見: &lt;strong&gt;我很不滿意&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;後來我心念一轉，&lt;strong&gt;很多事情不是我能控制的&lt;/strong&gt;，因此&lt;strong&gt;只需要專注在我能努力的事情&lt;/strong&gt;就好，至於我無法改變的事情就隨他去吧。除此之外，在寒假休息期間我也鼓勵自己下個學期無論如何都要努力把這個這個功能給做出來，不然以後的我肯定會很後悔。&lt;/p&gt;
&lt;p&gt;我必須說，壓力大的時候做點可以舒緩壓力的事情真的很重要! 無論是打球運動、看影片玩遊戲、聽音樂娛樂，或甚至找朋友聊聊都很有幫助。特別感謝與我同一個實驗室的專題生&lt;strong&gt;小崴&lt;/strong&gt;時常在meeting完之後陪我吃飯聊天，雖然我們加入的計畫不同，但都有遇到各種鳥事XD，互相吐苦水大大的幫助我紓解壓力。所以壓力大的時候別跟自己過不去，撐到最後才是真的!&lt;/p&gt;
&lt;h3 id=&#34;不要指望別人會對你有幫助&#34;&gt;🪄不要指望別人會對你有幫助&lt;/h3&gt;
&lt;p&gt;在前面提到的低潮期中，我甚至還一度萌生出擺爛的想法，總想著如果讓老師調人來支援我，或乾脆老師把我換到別的計畫底下去做那該有多好。但那也只是我在壓力大的時候所產生的想法罷了，最後也沒有如願發生。&lt;/p&gt;
&lt;p&gt;後來我想通了一件事那就是，&lt;strong&gt;「不要期待別人總會對你有幫助」&lt;/strong&gt;。每個人都有自己的事情要忙，而且實際上他們也沒有義務要幫忙，所以很多事情還是要靠自己來，俗話說的好:&lt;strong&gt;「師父領進門，修行在個人。」&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;真的不行的時候還是要尋求幫助&#34;&gt;🪄真的不行的時候還是要尋求幫助&lt;/h3&gt;
&lt;p&gt;雖然才說不要期待別人會對你有幫助，但這樣講並不代表你不能主動去尋求幫助。事實上，當一件事需要花費大量的時間跟力氣來做，卻仍然沒有什麼實質進展時，這時反而要&lt;strong&gt;檢討自己是不是方法不正確&lt;/strong&gt;。當遇到困難時，比起自己埋頭苦幹，尋求他人的意見或幫助才是正確的。&lt;/p&gt;
&lt;p&gt;在這邊也要特別感謝Yo學長的幫助，在我遇到困難的時候有丟一些網路的資料，或是提供我一些想法，甚至提供我對這方面有經驗的開發者的微信帳號讓我可以向他請教問題(雖然最後還是沒有幫助就是了XD)。另外也要特別感謝Yang學長的幫助，在我開發上遇到困難時，幫助我分析問題可能的原因。沒有這兩人的幫助，我沒有辦法順利的完成這個專題成果。&lt;/p&gt;
&lt;h3 id=&#34;你認為很基本的事情在其他人眼中可能看起來很難&#34;&gt;🪄你認為很基本的事情在其他人眼中可能看起來很難&lt;/h3&gt;
&lt;p&gt;在上面提到的問題終於解決的時候，還記得有不只一個研究生跟我說你這個真的厲害，直接硬幹寫出來。但如果將我達到最終結果的步驟一一拆解，其實也沒有用到多艱深的技術，在查找資料的過程中，我也很幸運的找到某位大大在GitHub上開源的API，使用這個API我就可以在使用的軟體中獲取到藍芽設備傳送過來的data。最後經過一番臨摹參考別人的scipt才得以客製化一個能在專案中使用的script，其中也包括&lt;strong&gt;轉換設備傳送來的原始數據&lt;/strong&gt;，這也是為什麼學長會覺得硬幹真的猛。但講真的，如果該設備一開始就有開發套件可以使用，那我也不需要為了這件事情焦頭爛額半個學期，我也可以花更多時間在改善其他部份上。&lt;/p&gt;
&lt;h3 id=&#34;人都是自私的&#34;&gt;🪄人都是自私的&lt;/h3&gt;
&lt;p&gt;在遇到困難的那幾周meeting時，我在報告的簡報中都會放上遇到的困難，希望讓老師了解我無法解決。我也在幫自己找理由，試圖製造出&lt;strong&gt;我努力過了，但我就是無法&lt;/strong&gt;的假象，但當我後來發現老師根本不太在乎，也不想幫我的時候，我就改變主意了。&lt;/p&gt;
&lt;p&gt;我不再提出我遇到的困難，變成單純的報告自己完成的進度。我甚至會在比較忙的時候把&lt;strong&gt;已經完成的進度&lt;/strong&gt;分成兩周來報告，剛加入實驗室的熱情早已燃燒殆盡，只剩交差了事。個人心境的變化可以談的比較多，而這跟我們實驗室的專題性質有很大的關係，之後會在另一篇文章中分享，總而言之就是我最後也&lt;strong&gt;逐漸走向偷懶的道路&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人都是自私的&lt;/strong&gt;，教授也是、學長也是，我也是。&lt;/p&gt;
&lt;h3 id=&#34;一切都是最好的安排&#34;&gt;🪄一切都是最好的安排&lt;/h3&gt;
&lt;p&gt;現在這個時間點往回看這兩個學期的日子，雖然有非常多的事情可以吐槽，但我也學到非常多事。我認為自己的&lt;strong&gt;軟實力&amp;amp;硬實力&lt;/strong&gt;都有所提升，提升的程度比起過去修過的任何一堂課程都來的有效果。這兩學期的經驗與過去的學習經驗不大相同，以往我都不太會認真思考並嘗試自己解決問題，遇到問題時通常都是先上網找解答，這個壞習慣也讓我嘗到苦頭。經過這兩學期，我深刻的瞭解到，自己應該要先專研過再去尋找答案，不然若網路上沒有直接的解決方法那豈不是就無解了嗎?&lt;/p&gt;
&lt;p&gt;藉此機會我也了解到為什麼資工系的必修課程我都學不太好，這都是&lt;strong&gt;不求甚解&lt;/strong&gt;的後果，畢竟很多時候作業網路上都有解答對吧? 關於這個問題我之後也會寫一篇文章來分享。&lt;/p&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;p&gt;以上就是我大三專題這兩個學期學到的十件事情，這是我第一次寫這麼長的回顧文，不過機會難得想說稍微記錄一下。這篇文章也會是我發佈在&lt;strong&gt;個人網站&lt;/strong&gt;上的第一篇文章，有一句話是這麼說的，&lt;strong&gt;「寫作，是最好的自我投資。」&lt;/strong&gt;，我很想看看這句話是不是真的，試想自己如果持續公開寫作1年、5年，甚至10年? 成果怎麼樣我不知道，但我會試試看。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>關於作者</title>
        <link>https://victorchao996.github.io/%E9%97%9C%E6%96%BC%E4%BD%9C%E8%80%85/</link>
        <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/%E9%97%9C%E6%96%BC%E4%BD%9C%E8%80%85/</guid>
        <description>&lt;h2 id=&#34;hello&#34;&gt;Hello!&lt;/h2&gt;
&lt;p&gt;你好，我的名字是 趙冠霖(ZHAO,GUAN-LIN)，你也可以叫我Victor。&lt;br&gt;
目前是資工系大四的學生，歡迎參觀我的個人部落格。&lt;/p&gt;
&lt;p&gt;目前主要會寫的文章: &lt;strong&gt;回顧文、課堂筆記整理、技術筆記、讀書心得&lt;/strong&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>文章記錄</title>
        <link>https://victorchao996.github.io/archives/</link>
        <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>相關連結</title>
        <link>https://victorchao996.github.io/%E7%9B%B8%E9%97%9C%E9%80%A3%E7%B5%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/%E7%9B%B8%E9%97%9C%E9%80%A3%E7%B5%90/</guid>
        <description></description>
        </item>
        <item>
        <title>搜尋文章</title>
        <link>https://victorchao996.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://victorchao996.github.io/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
